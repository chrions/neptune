// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: protos/medical_record/medical_record.proto

package medical_record

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MedicalRecordServiceClient is the client API for MedicalRecordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MedicalRecordServiceClient interface {
	// 生成病案
	GenerateArchive(ctx context.Context, in *GenerateRequest, opts ...grpc.CallOption) (*MedicalArchive, error)
	// 病案列表
	ArchiveList(ctx context.Context, in *ArchiveListRequest, opts ...grpc.CallOption) (*ArchiveListResponse, error)
	//    // 获取病历详情
	//    rpc GetMedicalRecord(GetRequest) returns(MedicalRecord);
	// 根据病案id获取病历列表
	GetMedicalRecords(ctx context.Context, in *GetMedicalRecordsRequest, opts ...grpc.CallOption) (*MedicalRecordList, error)
	// 病历归档
	ArchiveRecord(ctx context.Context, in *ArchiveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 病历详情
	GetMedicalRecordDetail(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*MedicalRecordInfo, error)
	// 病历基础信息更新
	UpdateMedicalRecordBasicInfo(ctx context.Context, in *UpdateBasicInfoRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 病历家族史更新
	UpdateMedicalRecordFamilyHistory(ctx context.Context, in *UpdateFamilyHistoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 更新生活方式
	UpdateLifeStyle(ctx context.Context, in *UpdateLifeStyleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 更新中医问诊
	UpdateConsultation(ctx context.Context, in *UpdateConsultationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 更新查体数据
	UpdatePhysicalExamination(ctx context.Context, in *UpdatePhysicalExaminationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 更新危险控制因素
	UpdateHazardControlFactors(ctx context.Context, in *UpdateHazardControlFactorsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 更新脏器功能
	UpdateViscera(ctx context.Context, in *UpdateVisceraRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 更新健康评价
	UpdateHealthAssessment(ctx context.Context, in *UpdateHealthAssessmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 更新主诉
	UpdateChiefComplaint(ctx context.Context, in *UpdateChiefComplaintRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 更新职业病危害因素接触
	UpdateOccupationalExposureHazard(ctx context.Context, in *UpdateOccupationalExposureHazardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 更新诊断结果
	UpdateDiagnosisInfo(ctx context.Context, in *UpdateDiagnosisInfoRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type medicalRecordServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMedicalRecordServiceClient(cc grpc.ClientConnInterface) MedicalRecordServiceClient {
	return &medicalRecordServiceClient{cc}
}

func (c *medicalRecordServiceClient) GenerateArchive(ctx context.Context, in *GenerateRequest, opts ...grpc.CallOption) (*MedicalArchive, error) {
	out := new(MedicalArchive)
	err := c.cc.Invoke(ctx, "/medical_record.MedicalRecordService/GenerateArchive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicalRecordServiceClient) ArchiveList(ctx context.Context, in *ArchiveListRequest, opts ...grpc.CallOption) (*ArchiveListResponse, error) {
	out := new(ArchiveListResponse)
	err := c.cc.Invoke(ctx, "/medical_record.MedicalRecordService/ArchiveList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicalRecordServiceClient) GetMedicalRecords(ctx context.Context, in *GetMedicalRecordsRequest, opts ...grpc.CallOption) (*MedicalRecordList, error) {
	out := new(MedicalRecordList)
	err := c.cc.Invoke(ctx, "/medical_record.MedicalRecordService/GetMedicalRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicalRecordServiceClient) ArchiveRecord(ctx context.Context, in *ArchiveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/medical_record.MedicalRecordService/ArchiveRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicalRecordServiceClient) GetMedicalRecordDetail(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*MedicalRecordInfo, error) {
	out := new(MedicalRecordInfo)
	err := c.cc.Invoke(ctx, "/medical_record.MedicalRecordService/GetMedicalRecordDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicalRecordServiceClient) UpdateMedicalRecordBasicInfo(ctx context.Context, in *UpdateBasicInfoRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/medical_record.MedicalRecordService/UpdateMedicalRecordBasicInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicalRecordServiceClient) UpdateMedicalRecordFamilyHistory(ctx context.Context, in *UpdateFamilyHistoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/medical_record.MedicalRecordService/UpdateMedicalRecordFamilyHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicalRecordServiceClient) UpdateLifeStyle(ctx context.Context, in *UpdateLifeStyleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/medical_record.MedicalRecordService/UpdateLifeStyle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicalRecordServiceClient) UpdateConsultation(ctx context.Context, in *UpdateConsultationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/medical_record.MedicalRecordService/UpdateConsultation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicalRecordServiceClient) UpdatePhysicalExamination(ctx context.Context, in *UpdatePhysicalExaminationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/medical_record.MedicalRecordService/UpdatePhysicalExamination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicalRecordServiceClient) UpdateHazardControlFactors(ctx context.Context, in *UpdateHazardControlFactorsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/medical_record.MedicalRecordService/UpdateHazardControlFactors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicalRecordServiceClient) UpdateViscera(ctx context.Context, in *UpdateVisceraRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/medical_record.MedicalRecordService/UpdateViscera", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicalRecordServiceClient) UpdateHealthAssessment(ctx context.Context, in *UpdateHealthAssessmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/medical_record.MedicalRecordService/UpdateHealthAssessment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicalRecordServiceClient) UpdateChiefComplaint(ctx context.Context, in *UpdateChiefComplaintRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/medical_record.MedicalRecordService/UpdateChiefComplaint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicalRecordServiceClient) UpdateOccupationalExposureHazard(ctx context.Context, in *UpdateOccupationalExposureHazardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/medical_record.MedicalRecordService/UpdateOccupationalExposureHazard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicalRecordServiceClient) UpdateDiagnosisInfo(ctx context.Context, in *UpdateDiagnosisInfoRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/medical_record.MedicalRecordService/UpdateDiagnosisInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MedicalRecordServiceServer is the server API for MedicalRecordService service.
// All implementations must embed UnimplementedMedicalRecordServiceServer
// for forward compatibility
type MedicalRecordServiceServer interface {
	// 生成病案
	GenerateArchive(context.Context, *GenerateRequest) (*MedicalArchive, error)
	// 病案列表
	ArchiveList(context.Context, *ArchiveListRequest) (*ArchiveListResponse, error)
	//    // 获取病历详情
	//    rpc GetMedicalRecord(GetRequest) returns(MedicalRecord);
	// 根据病案id获取病历列表
	GetMedicalRecords(context.Context, *GetMedicalRecordsRequest) (*MedicalRecordList, error)
	// 病历归档
	ArchiveRecord(context.Context, *ArchiveRequest) (*emptypb.Empty, error)
	// 病历详情
	GetMedicalRecordDetail(context.Context, *GetRequest) (*MedicalRecordInfo, error)
	// 病历基础信息更新
	UpdateMedicalRecordBasicInfo(context.Context, *UpdateBasicInfoRequest) (*emptypb.Empty, error)
	// 病历家族史更新
	UpdateMedicalRecordFamilyHistory(context.Context, *UpdateFamilyHistoryRequest) (*emptypb.Empty, error)
	// 更新生活方式
	UpdateLifeStyle(context.Context, *UpdateLifeStyleRequest) (*emptypb.Empty, error)
	// 更新中医问诊
	UpdateConsultation(context.Context, *UpdateConsultationRequest) (*emptypb.Empty, error)
	// 更新查体数据
	UpdatePhysicalExamination(context.Context, *UpdatePhysicalExaminationRequest) (*emptypb.Empty, error)
	// 更新危险控制因素
	UpdateHazardControlFactors(context.Context, *UpdateHazardControlFactorsRequest) (*emptypb.Empty, error)
	// 更新脏器功能
	UpdateViscera(context.Context, *UpdateVisceraRequest) (*emptypb.Empty, error)
	// 更新健康评价
	UpdateHealthAssessment(context.Context, *UpdateHealthAssessmentRequest) (*emptypb.Empty, error)
	// 更新主诉
	UpdateChiefComplaint(context.Context, *UpdateChiefComplaintRequest) (*emptypb.Empty, error)
	// 更新职业病危害因素接触
	UpdateOccupationalExposureHazard(context.Context, *UpdateOccupationalExposureHazardRequest) (*emptypb.Empty, error)
	// 更新诊断结果
	UpdateDiagnosisInfo(context.Context, *UpdateDiagnosisInfoRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedMedicalRecordServiceServer()
}

// UnimplementedMedicalRecordServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMedicalRecordServiceServer struct {
}

func (UnimplementedMedicalRecordServiceServer) GenerateArchive(context.Context, *GenerateRequest) (*MedicalArchive, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateArchive not implemented")
}
func (UnimplementedMedicalRecordServiceServer) ArchiveList(context.Context, *ArchiveListRequest) (*ArchiveListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveList not implemented")
}
func (UnimplementedMedicalRecordServiceServer) GetMedicalRecords(context.Context, *GetMedicalRecordsRequest) (*MedicalRecordList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMedicalRecords not implemented")
}
func (UnimplementedMedicalRecordServiceServer) ArchiveRecord(context.Context, *ArchiveRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveRecord not implemented")
}
func (UnimplementedMedicalRecordServiceServer) GetMedicalRecordDetail(context.Context, *GetRequest) (*MedicalRecordInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMedicalRecordDetail not implemented")
}
func (UnimplementedMedicalRecordServiceServer) UpdateMedicalRecordBasicInfo(context.Context, *UpdateBasicInfoRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMedicalRecordBasicInfo not implemented")
}
func (UnimplementedMedicalRecordServiceServer) UpdateMedicalRecordFamilyHistory(context.Context, *UpdateFamilyHistoryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMedicalRecordFamilyHistory not implemented")
}
func (UnimplementedMedicalRecordServiceServer) UpdateLifeStyle(context.Context, *UpdateLifeStyleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLifeStyle not implemented")
}
func (UnimplementedMedicalRecordServiceServer) UpdateConsultation(context.Context, *UpdateConsultationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConsultation not implemented")
}
func (UnimplementedMedicalRecordServiceServer) UpdatePhysicalExamination(context.Context, *UpdatePhysicalExaminationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePhysicalExamination not implemented")
}
func (UnimplementedMedicalRecordServiceServer) UpdateHazardControlFactors(context.Context, *UpdateHazardControlFactorsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHazardControlFactors not implemented")
}
func (UnimplementedMedicalRecordServiceServer) UpdateViscera(context.Context, *UpdateVisceraRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateViscera not implemented")
}
func (UnimplementedMedicalRecordServiceServer) UpdateHealthAssessment(context.Context, *UpdateHealthAssessmentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHealthAssessment not implemented")
}
func (UnimplementedMedicalRecordServiceServer) UpdateChiefComplaint(context.Context, *UpdateChiefComplaintRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChiefComplaint not implemented")
}
func (UnimplementedMedicalRecordServiceServer) UpdateOccupationalExposureHazard(context.Context, *UpdateOccupationalExposureHazardRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOccupationalExposureHazard not implemented")
}
func (UnimplementedMedicalRecordServiceServer) UpdateDiagnosisInfo(context.Context, *UpdateDiagnosisInfoRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDiagnosisInfo not implemented")
}
func (UnimplementedMedicalRecordServiceServer) mustEmbedUnimplementedMedicalRecordServiceServer() {}

// UnsafeMedicalRecordServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MedicalRecordServiceServer will
// result in compilation errors.
type UnsafeMedicalRecordServiceServer interface {
	mustEmbedUnimplementedMedicalRecordServiceServer()
}

func RegisterMedicalRecordServiceServer(s grpc.ServiceRegistrar, srv MedicalRecordServiceServer) {
	s.RegisterService(&MedicalRecordService_ServiceDesc, srv)
}

func _MedicalRecordService_GenerateArchive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalRecordServiceServer).GenerateArchive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/medical_record.MedicalRecordService/GenerateArchive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalRecordServiceServer).GenerateArchive(ctx, req.(*GenerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicalRecordService_ArchiveList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalRecordServiceServer).ArchiveList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/medical_record.MedicalRecordService/ArchiveList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalRecordServiceServer).ArchiveList(ctx, req.(*ArchiveListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicalRecordService_GetMedicalRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMedicalRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalRecordServiceServer).GetMedicalRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/medical_record.MedicalRecordService/GetMedicalRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalRecordServiceServer).GetMedicalRecords(ctx, req.(*GetMedicalRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicalRecordService_ArchiveRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalRecordServiceServer).ArchiveRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/medical_record.MedicalRecordService/ArchiveRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalRecordServiceServer).ArchiveRecord(ctx, req.(*ArchiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicalRecordService_GetMedicalRecordDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalRecordServiceServer).GetMedicalRecordDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/medical_record.MedicalRecordService/GetMedicalRecordDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalRecordServiceServer).GetMedicalRecordDetail(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicalRecordService_UpdateMedicalRecordBasicInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBasicInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalRecordServiceServer).UpdateMedicalRecordBasicInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/medical_record.MedicalRecordService/UpdateMedicalRecordBasicInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalRecordServiceServer).UpdateMedicalRecordBasicInfo(ctx, req.(*UpdateBasicInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicalRecordService_UpdateMedicalRecordFamilyHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFamilyHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalRecordServiceServer).UpdateMedicalRecordFamilyHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/medical_record.MedicalRecordService/UpdateMedicalRecordFamilyHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalRecordServiceServer).UpdateMedicalRecordFamilyHistory(ctx, req.(*UpdateFamilyHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicalRecordService_UpdateLifeStyle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLifeStyleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalRecordServiceServer).UpdateLifeStyle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/medical_record.MedicalRecordService/UpdateLifeStyle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalRecordServiceServer).UpdateLifeStyle(ctx, req.(*UpdateLifeStyleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicalRecordService_UpdateConsultation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConsultationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalRecordServiceServer).UpdateConsultation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/medical_record.MedicalRecordService/UpdateConsultation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalRecordServiceServer).UpdateConsultation(ctx, req.(*UpdateConsultationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicalRecordService_UpdatePhysicalExamination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePhysicalExaminationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalRecordServiceServer).UpdatePhysicalExamination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/medical_record.MedicalRecordService/UpdatePhysicalExamination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalRecordServiceServer).UpdatePhysicalExamination(ctx, req.(*UpdatePhysicalExaminationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicalRecordService_UpdateHazardControlFactors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHazardControlFactorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalRecordServiceServer).UpdateHazardControlFactors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/medical_record.MedicalRecordService/UpdateHazardControlFactors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalRecordServiceServer).UpdateHazardControlFactors(ctx, req.(*UpdateHazardControlFactorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicalRecordService_UpdateViscera_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVisceraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalRecordServiceServer).UpdateViscera(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/medical_record.MedicalRecordService/UpdateViscera",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalRecordServiceServer).UpdateViscera(ctx, req.(*UpdateVisceraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicalRecordService_UpdateHealthAssessment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHealthAssessmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalRecordServiceServer).UpdateHealthAssessment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/medical_record.MedicalRecordService/UpdateHealthAssessment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalRecordServiceServer).UpdateHealthAssessment(ctx, req.(*UpdateHealthAssessmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicalRecordService_UpdateChiefComplaint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChiefComplaintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalRecordServiceServer).UpdateChiefComplaint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/medical_record.MedicalRecordService/UpdateChiefComplaint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalRecordServiceServer).UpdateChiefComplaint(ctx, req.(*UpdateChiefComplaintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicalRecordService_UpdateOccupationalExposureHazard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOccupationalExposureHazardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalRecordServiceServer).UpdateOccupationalExposureHazard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/medical_record.MedicalRecordService/UpdateOccupationalExposureHazard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalRecordServiceServer).UpdateOccupationalExposureHazard(ctx, req.(*UpdateOccupationalExposureHazardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicalRecordService_UpdateDiagnosisInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDiagnosisInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalRecordServiceServer).UpdateDiagnosisInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/medical_record.MedicalRecordService/UpdateDiagnosisInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalRecordServiceServer).UpdateDiagnosisInfo(ctx, req.(*UpdateDiagnosisInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MedicalRecordService_ServiceDesc is the grpc.ServiceDesc for MedicalRecordService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MedicalRecordService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "medical_record.MedicalRecordService",
	HandlerType: (*MedicalRecordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateArchive",
			Handler:    _MedicalRecordService_GenerateArchive_Handler,
		},
		{
			MethodName: "ArchiveList",
			Handler:    _MedicalRecordService_ArchiveList_Handler,
		},
		{
			MethodName: "GetMedicalRecords",
			Handler:    _MedicalRecordService_GetMedicalRecords_Handler,
		},
		{
			MethodName: "ArchiveRecord",
			Handler:    _MedicalRecordService_ArchiveRecord_Handler,
		},
		{
			MethodName: "GetMedicalRecordDetail",
			Handler:    _MedicalRecordService_GetMedicalRecordDetail_Handler,
		},
		{
			MethodName: "UpdateMedicalRecordBasicInfo",
			Handler:    _MedicalRecordService_UpdateMedicalRecordBasicInfo_Handler,
		},
		{
			MethodName: "UpdateMedicalRecordFamilyHistory",
			Handler:    _MedicalRecordService_UpdateMedicalRecordFamilyHistory_Handler,
		},
		{
			MethodName: "UpdateLifeStyle",
			Handler:    _MedicalRecordService_UpdateLifeStyle_Handler,
		},
		{
			MethodName: "UpdateConsultation",
			Handler:    _MedicalRecordService_UpdateConsultation_Handler,
		},
		{
			MethodName: "UpdatePhysicalExamination",
			Handler:    _MedicalRecordService_UpdatePhysicalExamination_Handler,
		},
		{
			MethodName: "UpdateHazardControlFactors",
			Handler:    _MedicalRecordService_UpdateHazardControlFactors_Handler,
		},
		{
			MethodName: "UpdateViscera",
			Handler:    _MedicalRecordService_UpdateViscera_Handler,
		},
		{
			MethodName: "UpdateHealthAssessment",
			Handler:    _MedicalRecordService_UpdateHealthAssessment_Handler,
		},
		{
			MethodName: "UpdateChiefComplaint",
			Handler:    _MedicalRecordService_UpdateChiefComplaint_Handler,
		},
		{
			MethodName: "UpdateOccupationalExposureHazard",
			Handler:    _MedicalRecordService_UpdateOccupationalExposureHazard_Handler,
		},
		{
			MethodName: "UpdateDiagnosisInfo",
			Handler:    _MedicalRecordService_UpdateDiagnosisInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/medical_record/medical_record.proto",
}
