// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.1
// source: protos/medical_record/medical_record.proto

package medical_record

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	health "nagya/protos/health"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ArchiveStatus int32

const (
	ArchiveStatus_UNARCHIVED ArchiveStatus = 0
	ArchiveStatus_ARCHIVED   ArchiveStatus = 1
)

// Enum value maps for ArchiveStatus.
var (
	ArchiveStatus_name = map[int32]string{
		0: "UNARCHIVED",
		1: "ARCHIVED",
	}
	ArchiveStatus_value = map[string]int32{
		"UNARCHIVED": 0,
		"ARCHIVED":   1,
	}
)

func (x ArchiveStatus) Enum() *ArchiveStatus {
	p := new(ArchiveStatus)
	*p = x
	return p
}

func (x ArchiveStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArchiveStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_medical_record_medical_record_proto_enumTypes[0].Descriptor()
}

func (ArchiveStatus) Type() protoreflect.EnumType {
	return &file_protos_medical_record_medical_record_proto_enumTypes[0]
}

func (x ArchiveStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArchiveStatus.Descriptor instead.
func (ArchiveStatus) EnumDescriptor() ([]byte, []int) {
	return file_protos_medical_record_medical_record_proto_rawDescGZIP(), []int{0}
}

type UpdateDiagnosisInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordId      int64          `protobuf:"varint,1,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
	DiagnosisInfo *DiagnosisInfo `protobuf:"bytes,2,opt,name=diagnosis_info,json=diagnosisInfo,proto3" json:"diagnosis_info,omitempty"`
}

func (x *UpdateDiagnosisInfoRequest) Reset() {
	*x = UpdateDiagnosisInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_medical_record_medical_record_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDiagnosisInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDiagnosisInfoRequest) ProtoMessage() {}

func (x *UpdateDiagnosisInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_medical_record_medical_record_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDiagnosisInfoRequest.ProtoReflect.Descriptor instead.
func (*UpdateDiagnosisInfoRequest) Descriptor() ([]byte, []int) {
	return file_protos_medical_record_medical_record_proto_rawDescGZIP(), []int{0}
}

func (x *UpdateDiagnosisInfoRequest) GetRecordId() int64 {
	if x != nil {
		return x.RecordId
	}
	return 0
}

func (x *UpdateDiagnosisInfoRequest) GetDiagnosisInfo() *DiagnosisInfo {
	if x != nil {
		return x.DiagnosisInfo
	}
	return nil
}

type UpdateOccupationalExposureHazardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordId                      int64                           `protobuf:"varint,1,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
	ExposureToOccupationalHazards []*ExposureToOccupationalHazard `protobuf:"bytes,2,rep,name=exposure_to_occupational_hazards,json=exposureToOccupationalHazards,proto3" json:"exposure_to_occupational_hazards,omitempty"`
}

func (x *UpdateOccupationalExposureHazardRequest) Reset() {
	*x = UpdateOccupationalExposureHazardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_medical_record_medical_record_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOccupationalExposureHazardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOccupationalExposureHazardRequest) ProtoMessage() {}

func (x *UpdateOccupationalExposureHazardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_medical_record_medical_record_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOccupationalExposureHazardRequest.ProtoReflect.Descriptor instead.
func (*UpdateOccupationalExposureHazardRequest) Descriptor() ([]byte, []int) {
	return file_protos_medical_record_medical_record_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateOccupationalExposureHazardRequest) GetRecordId() int64 {
	if x != nil {
		return x.RecordId
	}
	return 0
}

func (x *UpdateOccupationalExposureHazardRequest) GetExposureToOccupationalHazards() []*ExposureToOccupationalHazard {
	if x != nil {
		return x.ExposureToOccupationalHazards
	}
	return nil
}

type UpdateChiefComplaintRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordId       int64  `protobuf:"varint,1,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
	ChiefComplaint string `protobuf:"bytes,2,opt,name=chief_complaint,json=chiefComplaint,proto3" json:"chief_complaint,omitempty"`
}

func (x *UpdateChiefComplaintRequest) Reset() {
	*x = UpdateChiefComplaintRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_medical_record_medical_record_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChiefComplaintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChiefComplaintRequest) ProtoMessage() {}

func (x *UpdateChiefComplaintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_medical_record_medical_record_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChiefComplaintRequest.ProtoReflect.Descriptor instead.
func (*UpdateChiefComplaintRequest) Descriptor() ([]byte, []int) {
	return file_protos_medical_record_medical_record_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateChiefComplaintRequest) GetRecordId() int64 {
	if x != nil {
		return x.RecordId
	}
	return 0
}

func (x *UpdateChiefComplaintRequest) GetChiefComplaint() string {
	if x != nil {
		return x.ChiefComplaint
	}
	return ""
}

type UpdateHealthAssessmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordId         int64             `protobuf:"varint,1,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
	HealthAssessment *HealthAssessment `protobuf:"bytes,2,opt,name=health_assessment,json=healthAssessment,proto3" json:"health_assessment,omitempty"`
}

func (x *UpdateHealthAssessmentRequest) Reset() {
	*x = UpdateHealthAssessmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_medical_record_medical_record_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHealthAssessmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHealthAssessmentRequest) ProtoMessage() {}

func (x *UpdateHealthAssessmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_medical_record_medical_record_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHealthAssessmentRequest.ProtoReflect.Descriptor instead.
func (*UpdateHealthAssessmentRequest) Descriptor() ([]byte, []int) {
	return file_protos_medical_record_medical_record_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateHealthAssessmentRequest) GetRecordId() int64 {
	if x != nil {
		return x.RecordId
	}
	return 0
}

func (x *UpdateHealthAssessmentRequest) GetHealthAssessment() *HealthAssessment {
	if x != nil {
		return x.HealthAssessment
	}
	return nil
}

type UpdateVisceraRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordId int64    `protobuf:"varint,1,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
	Viscera  *Viscera `protobuf:"bytes,2,opt,name=viscera,proto3" json:"viscera,omitempty"`
}

func (x *UpdateVisceraRequest) Reset() {
	*x = UpdateVisceraRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_medical_record_medical_record_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVisceraRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVisceraRequest) ProtoMessage() {}

func (x *UpdateVisceraRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_medical_record_medical_record_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVisceraRequest.ProtoReflect.Descriptor instead.
func (*UpdateVisceraRequest) Descriptor() ([]byte, []int) {
	return file_protos_medical_record_medical_record_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateVisceraRequest) GetRecordId() int64 {
	if x != nil {
		return x.RecordId
	}
	return 0
}

func (x *UpdateVisceraRequest) GetViscera() *Viscera {
	if x != nil {
		return x.Viscera
	}
	return nil
}

type UpdateHazardControlFactorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordId             int64                 `protobuf:"varint,1,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
	HazardControlFactors *HazardControlFactors `protobuf:"bytes,2,opt,name=hazard_control_factors,json=hazardControlFactors,proto3" json:"hazard_control_factors,omitempty"`
}

func (x *UpdateHazardControlFactorsRequest) Reset() {
	*x = UpdateHazardControlFactorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_medical_record_medical_record_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHazardControlFactorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHazardControlFactorsRequest) ProtoMessage() {}

func (x *UpdateHazardControlFactorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_medical_record_medical_record_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHazardControlFactorsRequest.ProtoReflect.Descriptor instead.
func (*UpdateHazardControlFactorsRequest) Descriptor() ([]byte, []int) {
	return file_protos_medical_record_medical_record_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateHazardControlFactorsRequest) GetRecordId() int64 {
	if x != nil {
		return x.RecordId
	}
	return 0
}

func (x *UpdateHazardControlFactorsRequest) GetHazardControlFactors() *HazardControlFactors {
	if x != nil {
		return x.HazardControlFactors
	}
	return nil
}

type UpdateConsultationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordId     int64         `protobuf:"varint,1,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
	Consultation *Consultation `protobuf:"bytes,2,opt,name=consultation,proto3" json:"consultation,omitempty"`
}

func (x *UpdateConsultationRequest) Reset() {
	*x = UpdateConsultationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_medical_record_medical_record_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConsultationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConsultationRequest) ProtoMessage() {}

func (x *UpdateConsultationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_medical_record_medical_record_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConsultationRequest.ProtoReflect.Descriptor instead.
func (*UpdateConsultationRequest) Descriptor() ([]byte, []int) {
	return file_protos_medical_record_medical_record_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateConsultationRequest) GetRecordId() int64 {
	if x != nil {
		return x.RecordId
	}
	return 0
}

func (x *UpdateConsultationRequest) GetConsultation() *Consultation {
	if x != nil {
		return x.Consultation
	}
	return nil
}

type UpdatePhysicalExaminationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordId            int64                `protobuf:"varint,1,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
	PhysicalExamination *PhysicalExamination `protobuf:"bytes,2,opt,name=physical_examination,json=physicalExamination,proto3" json:"physical_examination,omitempty"`
}

func (x *UpdatePhysicalExaminationRequest) Reset() {
	*x = UpdatePhysicalExaminationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_medical_record_medical_record_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePhysicalExaminationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePhysicalExaminationRequest) ProtoMessage() {}

func (x *UpdatePhysicalExaminationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_medical_record_medical_record_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePhysicalExaminationRequest.ProtoReflect.Descriptor instead.
func (*UpdatePhysicalExaminationRequest) Descriptor() ([]byte, []int) {
	return file_protos_medical_record_medical_record_proto_rawDescGZIP(), []int{7}
}

func (x *UpdatePhysicalExaminationRequest) GetRecordId() int64 {
	if x != nil {
		return x.RecordId
	}
	return 0
}

func (x *UpdatePhysicalExaminationRequest) GetPhysicalExamination() *PhysicalExamination {
	if x != nil {
		return x.PhysicalExamination
	}
	return nil
}

type UpdateBasicInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordId  int64             `protobuf:"varint,1,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
	BasicInfo *PatientBasicInfo `protobuf:"bytes,2,opt,name=basic_info,json=basicInfo,proto3" json:"basic_info,omitempty"`
}

func (x *UpdateBasicInfoRequest) Reset() {
	*x = UpdateBasicInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_medical_record_medical_record_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBasicInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBasicInfoRequest) ProtoMessage() {}

func (x *UpdateBasicInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_medical_record_medical_record_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBasicInfoRequest.ProtoReflect.Descriptor instead.
func (*UpdateBasicInfoRequest) Descriptor() ([]byte, []int) {
	return file_protos_medical_record_medical_record_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateBasicInfoRequest) GetRecordId() int64 {
	if x != nil {
		return x.RecordId
	}
	return 0
}

func (x *UpdateBasicInfoRequest) GetBasicInfo() *PatientBasicInfo {
	if x != nil {
		return x.BasicInfo
	}
	return nil
}

type UpdateFamilyHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordId      int64  `protobuf:"varint,1,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
	FamilyHistory string `protobuf:"bytes,2,opt,name=family_history,json=familyHistory,proto3" json:"family_history,omitempty"`
}

func (x *UpdateFamilyHistoryRequest) Reset() {
	*x = UpdateFamilyHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_medical_record_medical_record_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFamilyHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFamilyHistoryRequest) ProtoMessage() {}

func (x *UpdateFamilyHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_medical_record_medical_record_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFamilyHistoryRequest.ProtoReflect.Descriptor instead.
func (*UpdateFamilyHistoryRequest) Descriptor() ([]byte, []int) {
	return file_protos_medical_record_medical_record_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateFamilyHistoryRequest) GetRecordId() int64 {
	if x != nil {
		return x.RecordId
	}
	return 0
}

func (x *UpdateFamilyHistoryRequest) GetFamilyHistory() string {
	if x != nil {
		return x.FamilyHistory
	}
	return ""
}

type UpdateLifeStyleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordId  int64      `protobuf:"varint,1,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
	LifeStyle *LifeStyle `protobuf:"bytes,2,opt,name=life_style,json=lifeStyle,proto3" json:"life_style,omitempty"`
}

func (x *UpdateLifeStyleRequest) Reset() {
	*x = UpdateLifeStyleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_medical_record_medical_record_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLifeStyleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLifeStyleRequest) ProtoMessage() {}

func (x *UpdateLifeStyleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_medical_record_medical_record_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLifeStyleRequest.ProtoReflect.Descriptor instead.
func (*UpdateLifeStyleRequest) Descriptor() ([]byte, []int) {
	return file_protos_medical_record_medical_record_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateLifeStyleRequest) GetRecordId() int64 {
	if x != nil {
		return x.RecordId
	}
	return 0
}

func (x *UpdateLifeStyleRequest) GetLifeStyle() *LifeStyle {
	if x != nil {
		return x.LifeStyle
	}
	return nil
}

type GetMedicalRecordsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArchiveId int64 `protobuf:"varint,1,opt,name=archive_id,json=archiveId,proto3" json:"archive_id,omitempty"`
	Page      int64 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PageSize  int64 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *GetMedicalRecordsRequest) Reset() {
	*x = GetMedicalRecordsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_medical_record_medical_record_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMedicalRecordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMedicalRecordsRequest) ProtoMessage() {}

func (x *GetMedicalRecordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_medical_record_medical_record_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMedicalRecordsRequest.ProtoReflect.Descriptor instead.
func (*GetMedicalRecordsRequest) Descriptor() ([]byte, []int) {
	return file_protos_medical_record_medical_record_proto_rawDescGZIP(), []int{11}
}

func (x *GetMedicalRecordsRequest) GetArchiveId() int64 {
	if x != nil {
		return x.ArchiveId
	}
	return 0
}

func (x *GetMedicalRecordsRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetMedicalRecordsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ArchiveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordId int64 `protobuf:"varint,1,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
}

func (x *ArchiveRequest) Reset() {
	*x = ArchiveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_medical_record_medical_record_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArchiveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveRequest) ProtoMessage() {}

func (x *ArchiveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_medical_record_medical_record_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveRequest.ProtoReflect.Descriptor instead.
func (*ArchiveRequest) Descriptor() ([]byte, []int) {
	return file_protos_medical_record_medical_record_proto_rawDescGZIP(), []int{12}
}

func (x *ArchiveRequest) GetRecordId() int64 {
	if x != nil {
		return x.RecordId
	}
	return 0
}

type ArchiveListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      int64  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize  int64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Phone     string `protobuf:"bytes,4,opt,name=phone,proto3" json:"phone,omitempty"`
	IdCard    string `protobuf:"bytes,5,opt,name=id_card,json=idCard,proto3" json:"id_card,omitempty"`
	ArchiveNo string `protobuf:"bytes,6,opt,name=archive_no,json=archiveNo,proto3" json:"archive_no,omitempty"`
}

func (x *ArchiveListRequest) Reset() {
	*x = ArchiveListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_medical_record_medical_record_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArchiveListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveListRequest) ProtoMessage() {}

func (x *ArchiveListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_medical_record_medical_record_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveListRequest.ProtoReflect.Descriptor instead.
func (*ArchiveListRequest) Descriptor() ([]byte, []int) {
	return file_protos_medical_record_medical_record_proto_rawDescGZIP(), []int{13}
}

func (x *ArchiveListRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ArchiveListRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ArchiveListRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ArchiveListRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *ArchiveListRequest) GetIdCard() string {
	if x != nil {
		return x.IdCard
	}
	return ""
}

func (x *ArchiveListRequest) GetArchiveNo() string {
	if x != nil {
		return x.ArchiveNo
	}
	return ""
}

type ArchiveListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*MedicalArchive `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Total int64             `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ArchiveListResponse) Reset() {
	*x = ArchiveListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_medical_record_medical_record_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArchiveListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveListResponse) ProtoMessage() {}

func (x *ArchiveListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_medical_record_medical_record_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveListResponse.ProtoReflect.Descriptor instead.
func (*ArchiveListResponse) Descriptor() ([]byte, []int) {
	return file_protos_medical_record_medical_record_proto_rawDescGZIP(), []int{14}
}

func (x *ArchiveListResponse) GetItems() []*MedicalArchive {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ArchiveListResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GenerateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phone    string `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Birthday string `protobuf:"bytes,3,opt,name=birthday,proto3" json:"birthday,omitempty"`
	IdCard   string `protobuf:"bytes,4,opt,name=id_card,json=idCard,proto3" json:"id_card,omitempty"`
}

func (x *GenerateRequest) Reset() {
	*x = GenerateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_medical_record_medical_record_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateRequest) ProtoMessage() {}

func (x *GenerateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_medical_record_medical_record_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateRequest.ProtoReflect.Descriptor instead.
func (*GenerateRequest) Descriptor() ([]byte, []int) {
	return file_protos_medical_record_medical_record_proto_rawDescGZIP(), []int{15}
}

func (x *GenerateRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *GenerateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GenerateRequest) GetBirthday() string {
	if x != nil {
		return x.Birthday
	}
	return ""
}

func (x *GenerateRequest) GetIdCard() string {
	if x != nil {
		return x.IdCard
	}
	return ""
}

type GetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordId int64 `protobuf:"varint,1,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
}

func (x *GetRequest) Reset() {
	*x = GetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_medical_record_medical_record_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequest) ProtoMessage() {}

func (x *GetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_medical_record_medical_record_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequest.ProtoReflect.Descriptor instead.
func (*GetRequest) Descriptor() ([]byte, []int) {
	return file_protos_medical_record_medical_record_proto_rawDescGZIP(), []int{16}
}

func (x *GetRequest) GetRecordId() int64 {
	if x != nil {
		return x.RecordId
	}
	return 0
}

type MedicalRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//    BaseInfo baseinfo = 2;
	VisitTime           string        `protobuf:"bytes,3,opt,name=visit_time,json=visitTime,proto3" json:"visit_time,omitempty"`                                                 // 就诊时间 clinic_flow.inquiry_info.create_time
	AttendingDoctorId   int32         `protobuf:"varint,4,opt,name=attending_doctor_id,json=attendingDoctorId,proto3" json:"attending_doctor_id,omitempty"`                      // 主治医师id clinic_flow.user_transfer_defail.doctor_id
	AttendingDoctorName string        `protobuf:"bytes,5,opt,name=attending_doctor_name,json=attendingDoctorName,proto3" json:"attending_doctor_name,omitempty"`                 // 主治医师name clinic_flow.user_transfer_defail.doctor_name
	TcmDiagnosis        string        `protobuf:"bytes,6,opt,name=tcm_diagnosis,json=tcmDiagnosis,proto3" json:"tcm_diagnosis,omitempty"`                                        // 中医诊断 clinic_flow.user_transfer_defail.diagnosis_info
	IbdDiagnosis        string        `protobuf:"bytes,7,opt,name=ibd_diagnosis,json=ibdDiagnosis,proto3" json:"ibd_diagnosis,omitempty"`                                        // 西医诊断 clinic_flow.user_transfer_defail.diagnosis_info
	MedicationAdvice    string        `protobuf:"bytes,8,opt,name=medication_advice,json=medicationAdvice,proto3" json:"medication_advice,omitempty"`                            // 暂无
	FirstVisit          bool          `protobuf:"varint,9,opt,name=first_visit,json=firstVisit,proto3" json:"first_visit,omitempty"`                                             // 是否为首诊
	ArchiveStatus       ArchiveStatus `protobuf:"varint,10,opt,name=archive_status,json=archiveStatus,proto3,enum=medical_record.ArchiveStatus" json:"archive_status,omitempty"` // 归档状态
	ArchiveId           int64         `protobuf:"varint,11,opt,name=archive_id,json=archiveId,proto3" json:"archive_id,omitempty"`                                               //病历id，目前看没啥用，用第一个id就行了
	UserId              int64         `protobuf:"varint,12,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                                        //用户id，目前是手机号？
	FlowId              int64         `protobuf:"varint,13,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"`                                                        //flow id
}

func (x *MedicalRecord) Reset() {
	*x = MedicalRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_medical_record_medical_record_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicalRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicalRecord) ProtoMessage() {}

func (x *MedicalRecord) ProtoReflect() protoreflect.Message {
	mi := &file_protos_medical_record_medical_record_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicalRecord.ProtoReflect.Descriptor instead.
func (*MedicalRecord) Descriptor() ([]byte, []int) {
	return file_protos_medical_record_medical_record_proto_rawDescGZIP(), []int{17}
}

func (x *MedicalRecord) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MedicalRecord) GetVisitTime() string {
	if x != nil {
		return x.VisitTime
	}
	return ""
}

func (x *MedicalRecord) GetAttendingDoctorId() int32 {
	if x != nil {
		return x.AttendingDoctorId
	}
	return 0
}

func (x *MedicalRecord) GetAttendingDoctorName() string {
	if x != nil {
		return x.AttendingDoctorName
	}
	return ""
}

func (x *MedicalRecord) GetTcmDiagnosis() string {
	if x != nil {
		return x.TcmDiagnosis
	}
	return ""
}

func (x *MedicalRecord) GetIbdDiagnosis() string {
	if x != nil {
		return x.IbdDiagnosis
	}
	return ""
}

func (x *MedicalRecord) GetMedicationAdvice() string {
	if x != nil {
		return x.MedicationAdvice
	}
	return ""
}

func (x *MedicalRecord) GetFirstVisit() bool {
	if x != nil {
		return x.FirstVisit
	}
	return false
}

func (x *MedicalRecord) GetArchiveStatus() ArchiveStatus {
	if x != nil {
		return x.ArchiveStatus
	}
	return ArchiveStatus_UNARCHIVED
}

func (x *MedicalRecord) GetArchiveId() int64 {
	if x != nil {
		return x.ArchiveId
	}
	return 0
}

func (x *MedicalRecord) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *MedicalRecord) GetFlowId() int64 {
	if x != nil {
		return x.FlowId
	}
	return 0
}

type MedicalRecordList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*MedicalRecord `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Total int64            `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *MedicalRecordList) Reset() {
	*x = MedicalRecordList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_medical_record_medical_record_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicalRecordList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicalRecordList) ProtoMessage() {}

func (x *MedicalRecordList) ProtoReflect() protoreflect.Message {
	mi := &file_protos_medical_record_medical_record_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicalRecordList.ProtoReflect.Descriptor instead.
func (*MedicalRecordList) Descriptor() ([]byte, []int) {
	return file_protos_medical_record_medical_record_proto_rawDescGZIP(), []int{18}
}

func (x *MedicalRecordList) GetItems() []*MedicalRecord {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *MedicalRecordList) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type MedicalArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	No         string `protobuf:"bytes,2,opt,name=no,proto3" json:"no,omitempty"`                                    // 病案编号
	Phone      string `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`                              // 联系电话
	Name       string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`                                // 姓名
	Birthday   string `protobuf:"bytes,5,opt,name=birthday,proto3" json:"birthday,omitempty"`                        // 出生日期
	IdCard     string `protobuf:"bytes,6,opt,name=id_card,json=idCard,proto3" json:"id_card,omitempty"`              // 身份证
	Address    string `protobuf:"bytes,7,opt,name=address,proto3" json:"address,omitempty"`                          // 家庭住址
	Gender     int32  `protobuf:"varint,8,opt,name=gender,proto3" json:"gender,omitempty"`                           // 性别
	BloodType  string `protobuf:"bytes,9,opt,name=blood_type,json=bloodType,proto3" json:"blood_type,omitempty"`     // 血型
	CreateTime string `protobuf:"bytes,10,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"` // 创建日期
}

func (x *MedicalArchive) Reset() {
	*x = MedicalArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_medical_record_medical_record_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicalArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicalArchive) ProtoMessage() {}

func (x *MedicalArchive) ProtoReflect() protoreflect.Message {
	mi := &file_protos_medical_record_medical_record_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicalArchive.ProtoReflect.Descriptor instead.
func (*MedicalArchive) Descriptor() ([]byte, []int) {
	return file_protos_medical_record_medical_record_proto_rawDescGZIP(), []int{19}
}

func (x *MedicalArchive) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MedicalArchive) GetNo() string {
	if x != nil {
		return x.No
	}
	return ""
}

func (x *MedicalArchive) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *MedicalArchive) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MedicalArchive) GetBirthday() string {
	if x != nil {
		return x.Birthday
	}
	return ""
}

func (x *MedicalArchive) GetIdCard() string {
	if x != nil {
		return x.IdCard
	}
	return ""
}

func (x *MedicalArchive) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *MedicalArchive) GetGender() int32 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *MedicalArchive) GetBloodType() string {
	if x != nil {
		return x.BloodType
	}
	return ""
}

func (x *MedicalArchive) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

//患者病历聚合详情
type MedicalRecordInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicInfo                         *PatientBasicInfo               `protobuf:"bytes,1,opt,name=basic_info,json=basicInfo,proto3" json:"basic_info,omitempty"`                                                                                //患者基本消息
	DrugAllergyHistory                string                          `protobuf:"bytes,2,opt,name=drug_allergy_history,json=drugAllergyHistory,proto3" json:"drug_allergy_history,omitempty"`                                                   //药物过敏史
	ExposureHistory                   string                          `protobuf:"bytes,3,opt,name=exposure_history,json=exposureHistory,proto3" json:"exposure_history,omitempty"`                                                              //暴露史
	GeneticHistory                    string                          `protobuf:"bytes,4,opt,name=genetic_history,json=geneticHistory,proto3" json:"genetic_history,omitempty"`                                                                 //遗传病史
	PastHistory                       string                          `protobuf:"bytes,5,opt,name=past_history,json=pastHistory,proto3" json:"past_history,omitempty"`                                                                          //既往史
	FamilyHistory                     string                          `protobuf:"bytes,6,opt,name=family_history,json=familyHistory,proto3" json:"family_history,omitempty"`                                                                    //家族史
	LifeStyle                         *LifeStyle                      `protobuf:"bytes,7,opt,name=life_style,json=lifeStyle,proto3" json:"life_style,omitempty"`                                                                                //生活方式
	Consultation                      *Consultation                   `protobuf:"bytes,8,opt,name=consultation,proto3" json:"consultation,omitempty"`                                                                                           //中医问诊
	DrugUsageItems                    []*DrugUsageItem                `protobuf:"bytes,9,rep,name=drug_usage_items,json=drugUsageItems,proto3" json:"drug_usage_items,omitempty"`                                                               //主要用药情况
	ChiefComplaint                    string                          `protobuf:"bytes,10,opt,name=chief_complaint,json=chiefComplaint,proto3" json:"chief_complaint,omitempty"`                                                                //主诉
	GeneralInspection                 *GeneralInspection              `protobuf:"bytes,11,opt,name=general_inspection,json=generalInspection,proto3" json:"general_inspection,omitempty"`                                                       //一般情况
	HazardControlFactors              *HazardControlFactors           `protobuf:"bytes,12,opt,name=hazard_control_factors,json=hazardControlFactors,proto3" json:"hazard_control_factors,omitempty"`                                            //危险控制因素
	PhysicalExamination               *PhysicalExamination            `protobuf:"bytes,13,opt,name=physical_examination,json=physicalExamination,proto3" json:"physical_examination,omitempty"`                                                 //查体
	LaboratoryExamination             *LaboratoryExamination          `protobuf:"bytes,14,opt,name=laboratory_examination,json=laboratoryExamination,proto3" json:"laboratory_examination,omitempty"`                                           //实验室检验检查
	Viscera                           *Viscera                        `protobuf:"bytes,15,opt,name=viscera,proto3" json:"viscera,omitempty"`                                                                                                    //脏器
	HealthAssessment                  *HealthAssessment               `protobuf:"bytes,16,opt,name=health_assessment,json=healthAssessment,proto3" json:"health_assessment,omitempty"`                                                          //健康评价
	ExternalTreatmentPlanItems        []*ExternalTreatmentPlanItem    `protobuf:"bytes,17,rep,name=external_treatment_plan_items,json=externalTreatmentPlanItems,proto3" json:"external_treatment_plan_items,omitempty"`                        //外治方案
	VaccinationHistoryListItems       []*VaccinationHistory           `protobuf:"bytes,18,rep,name=vaccination_history_list_items,json=vaccinationHistoryListItems,proto3" json:"vaccination_history_list_items,omitempty"`                     //非免疫规则预防接种历史
	HospitalizationRecordItems        []*HospitalizationRecord        `protobuf:"bytes,19,rep,name=hospitalization_record_items,json=hospitalizationRecordItems,proto3" json:"hospitalization_record_items,omitempty"`                          //住院治疗情况
	ExposureToOccupationalHazardItems []*ExposureToOccupationalHazard `protobuf:"bytes,20,rep,name=exposure_to_occupational_hazard_items,json=exposureToOccupationalHazardItems,proto3" json:"exposure_to_occupational_hazard_items,omitempty"` //职业疾病危害因素接触
	LivingEnvironmentItems            []*LivingEnvironment            `protobuf:"bytes,21,rep,name=living_environment_items,json=livingEnvironmentItems,proto3" json:"living_environment_items,omitempty"`                                      //生活环境
	InspectionReportItems             []*health.InspectionReport      `protobuf:"bytes,22,rep,name=inspection_report_items,json=inspectionReportItems,proto3" json:"inspection_report_items,omitempty"`                                         // 检查报告
	DiagnosisInfo                     *DiagnosisInfo                  `protobuf:"bytes,23,opt,name=diagnosis_info,json=diagnosisInfo,proto3" json:"diagnosis_info,omitempty"`                                                                   //todo 现存主要健康问题，是否与现病史重复
}

func (x *MedicalRecordInfo) Reset() {
	*x = MedicalRecordInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_medical_record_medical_record_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicalRecordInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicalRecordInfo) ProtoMessage() {}

func (x *MedicalRecordInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protos_medical_record_medical_record_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicalRecordInfo.ProtoReflect.Descriptor instead.
func (*MedicalRecordInfo) Descriptor() ([]byte, []int) {
	return file_protos_medical_record_medical_record_proto_rawDescGZIP(), []int{20}
}

func (x *MedicalRecordInfo) GetBasicInfo() *PatientBasicInfo {
	if x != nil {
		return x.BasicInfo
	}
	return nil
}

func (x *MedicalRecordInfo) GetDrugAllergyHistory() string {
	if x != nil {
		return x.DrugAllergyHistory
	}
	return ""
}

func (x *MedicalRecordInfo) GetExposureHistory() string {
	if x != nil {
		return x.ExposureHistory
	}
	return ""
}

func (x *MedicalRecordInfo) GetGeneticHistory() string {
	if x != nil {
		return x.GeneticHistory
	}
	return ""
}

func (x *MedicalRecordInfo) GetPastHistory() string {
	if x != nil {
		return x.PastHistory
	}
	return ""
}

func (x *MedicalRecordInfo) GetFamilyHistory() string {
	if x != nil {
		return x.FamilyHistory
	}
	return ""
}

func (x *MedicalRecordInfo) GetLifeStyle() *LifeStyle {
	if x != nil {
		return x.LifeStyle
	}
	return nil
}

func (x *MedicalRecordInfo) GetConsultation() *Consultation {
	if x != nil {
		return x.Consultation
	}
	return nil
}

func (x *MedicalRecordInfo) GetDrugUsageItems() []*DrugUsageItem {
	if x != nil {
		return x.DrugUsageItems
	}
	return nil
}

func (x *MedicalRecordInfo) GetChiefComplaint() string {
	if x != nil {
		return x.ChiefComplaint
	}
	return ""
}

func (x *MedicalRecordInfo) GetGeneralInspection() *GeneralInspection {
	if x != nil {
		return x.GeneralInspection
	}
	return nil
}

func (x *MedicalRecordInfo) GetHazardControlFactors() *HazardControlFactors {
	if x != nil {
		return x.HazardControlFactors
	}
	return nil
}

func (x *MedicalRecordInfo) GetPhysicalExamination() *PhysicalExamination {
	if x != nil {
		return x.PhysicalExamination
	}
	return nil
}

func (x *MedicalRecordInfo) GetLaboratoryExamination() *LaboratoryExamination {
	if x != nil {
		return x.LaboratoryExamination
	}
	return nil
}

func (x *MedicalRecordInfo) GetViscera() *Viscera {
	if x != nil {
		return x.Viscera
	}
	return nil
}

func (x *MedicalRecordInfo) GetHealthAssessment() *HealthAssessment {
	if x != nil {
		return x.HealthAssessment
	}
	return nil
}

func (x *MedicalRecordInfo) GetExternalTreatmentPlanItems() []*ExternalTreatmentPlanItem {
	if x != nil {
		return x.ExternalTreatmentPlanItems
	}
	return nil
}

func (x *MedicalRecordInfo) GetVaccinationHistoryListItems() []*VaccinationHistory {
	if x != nil {
		return x.VaccinationHistoryListItems
	}
	return nil
}

func (x *MedicalRecordInfo) GetHospitalizationRecordItems() []*HospitalizationRecord {
	if x != nil {
		return x.HospitalizationRecordItems
	}
	return nil
}

func (x *MedicalRecordInfo) GetExposureToOccupationalHazardItems() []*ExposureToOccupationalHazard {
	if x != nil {
		return x.ExposureToOccupationalHazardItems
	}
	return nil
}

func (x *MedicalRecordInfo) GetLivingEnvironmentItems() []*LivingEnvironment {
	if x != nil {
		return x.LivingEnvironmentItems
	}
	return nil
}

func (x *MedicalRecordInfo) GetInspectionReportItems() []*health.InspectionReport {
	if x != nil {
		return x.InspectionReportItems
	}
	return nil
}

func (x *MedicalRecordInfo) GetDiagnosisInfo() *DiagnosisInfo {
	if x != nil {
		return x.DiagnosisInfo
	}
	return nil
}

//患者基本信息
type PatientBasicInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gender   int64  `protobuf:"varint,1,opt,name=gender,proto3" json:"gender,omitempty"`                    //性别
	Birthday string `protobuf:"bytes,2,opt,name=birthday,proto3" json:"birthday,omitempty"`                 //生日
	IdCard   string `protobuf:"bytes,3,opt,name=id_card,json=idCard,proto3" json:"id_card,omitempty"`       //身份证
	WorkUnit string `protobuf:"bytes,4,opt,name=work_unit,json=workUnit,proto3" json:"work_unit,omitempty"` //工作单位
	Phone    string `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone,omitempty"`                       //电话
	//    string contact_name =6; //联系人姓名
	//    int64 contact_phone =7; //联系人电话
	Career         int64  `protobuf:"varint,8,opt,name=career,proto3" json:"career,omitempty"`                                        //职业 [1国家机关、党群组织、企业、事业单位负责人|2 专业技术人员|3 办事人员和有关人员|4 商业、服务业人员|5 农、林、渔、牧、水利业生产人员|6 生产、运输设备操作人员及有关人员|7 军人|8 不便分类的其他从业人员|9 无职业]
	ResidentType   int64  `protobuf:"varint,9,opt,name=resident_type,json=residentType,proto3" json:"resident_type,omitempty"`        //常住地址类型 [1 户籍地|2 非户籍地]
	Nation         int64  `protobuf:"varint,10,opt,name=nation,proto3" json:"nation,omitempty"`                                       //民族 [1 汉族|2 少数民族]
	BloodGroup     string `protobuf:"bytes,11,opt,name=blood_group,json=bloodGroup,proto3" json:"blood_group,omitempty"`              //血型 [A|B|AB|O|不详]
	EducationLevel int64  `protobuf:"varint,12,opt,name=education_level,json=educationLevel,proto3" json:"education_level,omitempty"` //文化程度 [1 研究生|2 大学本科|3 大学专科和专科学校|4 中等专业学校|5 技工学校|6 高中|7 初中|8 小学|9 文盲或半文盲|10 不详]
	MaritalStatus  int64  `protobuf:"varint,13,opt,name=marital_status,json=maritalStatus,proto3" json:"marital_status,omitempty"`    //婚姻状况 [1 已婚|2未婚|3 丧偶|4 离婚|5 未说明情况]
	PaymentMethod  int64  `protobuf:"varint,14,opt,name=payment_method,json=paymentMethod,proto3" json:"payment_method,omitempty"`    //医疗费用支付方式 [1 城镇职工基本医疗保险|2 城镇居民基本医疗保险|3 新型农村合作医疗|4 贫困救助|5 商业医疗保险|6 全公费|7 全自费|8 其他]
	Disability     string `protobuf:"bytes,15,opt,name=disability,proto3" json:"disability,omitempty"`                                //残疾 多选用逗号分割 [1 无残疾|2 视力残疾|3 听力残疾|4 言语残疾|5 肢体残疾|6 智力残疾|7 精神残疾|8 其他残疾]
}

func (x *PatientBasicInfo) Reset() {
	*x = PatientBasicInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_medical_record_medical_record_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatientBasicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatientBasicInfo) ProtoMessage() {}

func (x *PatientBasicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protos_medical_record_medical_record_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatientBasicInfo.ProtoReflect.Descriptor instead.
func (*PatientBasicInfo) Descriptor() ([]byte, []int) {
	return file_protos_medical_record_medical_record_proto_rawDescGZIP(), []int{21}
}

func (x *PatientBasicInfo) GetGender() int64 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *PatientBasicInfo) GetBirthday() string {
	if x != nil {
		return x.Birthday
	}
	return ""
}

func (x *PatientBasicInfo) GetIdCard() string {
	if x != nil {
		return x.IdCard
	}
	return ""
}

func (x *PatientBasicInfo) GetWorkUnit() string {
	if x != nil {
		return x.WorkUnit
	}
	return ""
}

func (x *PatientBasicInfo) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *PatientBasicInfo) GetCareer() int64 {
	if x != nil {
		return x.Career
	}
	return 0
}

func (x *PatientBasicInfo) GetResidentType() int64 {
	if x != nil {
		return x.ResidentType
	}
	return 0
}

func (x *PatientBasicInfo) GetNation() int64 {
	if x != nil {
		return x.Nation
	}
	return 0
}

func (x *PatientBasicInfo) GetBloodGroup() string {
	if x != nil {
		return x.BloodGroup
	}
	return ""
}

func (x *PatientBasicInfo) GetEducationLevel() int64 {
	if x != nil {
		return x.EducationLevel
	}
	return 0
}

func (x *PatientBasicInfo) GetMaritalStatus() int64 {
	if x != nil {
		return x.MaritalStatus
	}
	return 0
}

func (x *PatientBasicInfo) GetPaymentMethod() int64 {
	if x != nil {
		return x.PaymentMethod
	}
	return 0
}

func (x *PatientBasicInfo) GetDisability() string {
	if x != nil {
		return x.Disability
	}
	return ""
}

//生活方式
type LifeStyle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExerciseFrequency int64   `protobuf:"varint,1,opt,name=exercise_frequency,json=exerciseFrequency,proto3" json:"exercise_frequency,omitempty"` //锻炼频率 [1 每天|2 每周一次以上|3 偶尔|4 不锻炼]
	ExerciseDuration  int64   `protobuf:"varint,2,opt,name=exercise_duration,json=exerciseDuration,proto3" json:"exercise_duration,omitempty"`    //每次锻炼时间/分钟
	ExerciseCycle     float64 `protobuf:"fixed64,3,opt,name=exercise_cycle,json=exerciseCycle,proto3" json:"exercise_cycle,omitempty"`            //坚持锻炼时间//年
	ExerciseMethods   string  `protobuf:"bytes,4,opt,name=exercise_methods,json=exerciseMethods,proto3" json:"exercise_methods,omitempty"`        //锻炼方式
	EatingHabits      string  `protobuf:"bytes,5,opt,name=eating_habits,json=eatingHabits,proto3" json:"eating_habits,omitempty"`                 //饮食习惯 多选用逗号分割 [1 荤素均衡|2 荤食为主|3 素食为主|4 嗜盐|5 嗜油|6 嗜糖]
	Smoke             int64   `protobuf:"varint,6,opt,name=smoke,proto3" json:"smoke,omitempty"`                                                  //吸烟状况 [1 从不吸烟|2 已戒烟|3 还在吸烟]
	DailySmokeVolume  int64   `protobuf:"varint,7,opt,name=daily_smoke_volume,json=dailySmokeVolume,proto3" json:"daily_smoke_volume,omitempty"`  //日吸烟量/支
	StartSmokeAge     int64   `protobuf:"varint,8,opt,name=start_smoke_age,json=startSmokeAge,proto3" json:"start_smoke_age,omitempty"`           //开始吸烟年龄/岁
	EndSmokeAge       int64   `protobuf:"varint,9,opt,name=end_smoke_age,json=endSmokeAge,proto3" json:"end_smoke_age,omitempty"`                 //戒烟年龄//岁
	Drink             int64   `protobuf:"varint,10,opt,name=drink,proto3" json:"drink,omitempty"`                                                 //饮酒频率 [1 从不|2 偶尔|3 经常|4 每天]
	DailyDrinkVolume  int64   `protobuf:"varint,11,opt,name=daily_drink_volume,json=dailyDrinkVolume,proto3" json:"daily_drink_volume,omitempty"` //日饮酒量/两
	QuitDrink         int64   `protobuf:"varint,12,opt,name=quit_drink,json=quitDrink,proto3" json:"quit_drink,omitempty"`                        //是否戒酒 [1 未戒酒|2 已经戒酒]
	StartDrinkAge     int64   `protobuf:"varint,13,opt,name=start_drink_age,json=startDrinkAge,proto3" json:"start_drink_age,omitempty"`          //开始饮酒年龄/岁
	EndDrinkAge       int64   `protobuf:"varint,14,opt,name=end_drink_age,json=endDrinkAge,proto3" json:"end_drink_age,omitempty"`                //戒酒年龄/岁
	PastYearDrink     int64   `protobuf:"varint,15,opt,name=past_year_drink,json=pastYearDrink,proto3" json:"past_year_drink,omitempty"`          //近一年内是否曾醉酒[1 是|2 否]
	DrinkType         string  `protobuf:"bytes,16,opt,name=drink_type,json=drinkType,proto3" json:"drink_type,omitempty"`                         //饮酒类型 多选用逗号分割 [1 白酒|2 啤酒|3 红酒|4 黄酒|5 其他]
	Id                int64   `protobuf:"varint,17,opt,name=id,proto3" json:"id,omitempty"`
	FlowId            int64   `protobuf:"varint,18,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"`
	Updater           string  `protobuf:"bytes,19,opt,name=updater,proto3" json:"updater,omitempty"`                         //最近操作者
	UpdateTime        string  `protobuf:"bytes,20,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"` //最近操作时间
}

func (x *LifeStyle) Reset() {
	*x = LifeStyle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_medical_record_medical_record_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LifeStyle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LifeStyle) ProtoMessage() {}

func (x *LifeStyle) ProtoReflect() protoreflect.Message {
	mi := &file_protos_medical_record_medical_record_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LifeStyle.ProtoReflect.Descriptor instead.
func (*LifeStyle) Descriptor() ([]byte, []int) {
	return file_protos_medical_record_medical_record_proto_rawDescGZIP(), []int{22}
}

func (x *LifeStyle) GetExerciseFrequency() int64 {
	if x != nil {
		return x.ExerciseFrequency
	}
	return 0
}

func (x *LifeStyle) GetExerciseDuration() int64 {
	if x != nil {
		return x.ExerciseDuration
	}
	return 0
}

func (x *LifeStyle) GetExerciseCycle() float64 {
	if x != nil {
		return x.ExerciseCycle
	}
	return 0
}

func (x *LifeStyle) GetExerciseMethods() string {
	if x != nil {
		return x.ExerciseMethods
	}
	return ""
}

func (x *LifeStyle) GetEatingHabits() string {
	if x != nil {
		return x.EatingHabits
	}
	return ""
}

func (x *LifeStyle) GetSmoke() int64 {
	if x != nil {
		return x.Smoke
	}
	return 0
}

func (x *LifeStyle) GetDailySmokeVolume() int64 {
	if x != nil {
		return x.DailySmokeVolume
	}
	return 0
}

func (x *LifeStyle) GetStartSmokeAge() int64 {
	if x != nil {
		return x.StartSmokeAge
	}
	return 0
}

func (x *LifeStyle) GetEndSmokeAge() int64 {
	if x != nil {
		return x.EndSmokeAge
	}
	return 0
}

func (x *LifeStyle) GetDrink() int64 {
	if x != nil {
		return x.Drink
	}
	return 0
}

func (x *LifeStyle) GetDailyDrinkVolume() int64 {
	if x != nil {
		return x.DailyDrinkVolume
	}
	return 0
}

func (x *LifeStyle) GetQuitDrink() int64 {
	if x != nil {
		return x.QuitDrink
	}
	return 0
}

func (x *LifeStyle) GetStartDrinkAge() int64 {
	if x != nil {
		return x.StartDrinkAge
	}
	return 0
}

func (x *LifeStyle) GetEndDrinkAge() int64 {
	if x != nil {
		return x.EndDrinkAge
	}
	return 0
}

func (x *LifeStyle) GetPastYearDrink() int64 {
	if x != nil {
		return x.PastYearDrink
	}
	return 0
}

func (x *LifeStyle) GetDrinkType() string {
	if x != nil {
		return x.DrinkType
	}
	return ""
}

func (x *LifeStyle) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LifeStyle) GetFlowId() int64 {
	if x != nil {
		return x.FlowId
	}
	return 0
}

func (x *LifeStyle) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

func (x *LifeStyle) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

//中医问诊信息
type Consultation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Face       string `protobuf:"bytes,1,opt,name=face,proto3" json:"face,omitempty"`                               //面诊
	Tongue     string `protobuf:"bytes,2,opt,name=tongue,proto3" json:"tongue,omitempty"`                           //舌诊
	PulseLeft  string `protobuf:"bytes,3,opt,name=pulse_left,json=pulseLeft,proto3" json:"pulse_left,omitempty"`    //左脉诊
	PulseRight string `protobuf:"bytes,4,opt,name=pulse_right,json=pulseRight,proto3" json:"pulse_right,omitempty"` //右脉诊
}

func (x *Consultation) Reset() {
	*x = Consultation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_medical_record_medical_record_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Consultation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Consultation) ProtoMessage() {}

func (x *Consultation) ProtoReflect() protoreflect.Message {
	mi := &file_protos_medical_record_medical_record_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Consultation.ProtoReflect.Descriptor instead.
func (*Consultation) Descriptor() ([]byte, []int) {
	return file_protos_medical_record_medical_record_proto_rawDescGZIP(), []int{23}
}

func (x *Consultation) GetFace() string {
	if x != nil {
		return x.Face
	}
	return ""
}

func (x *Consultation) GetTongue() string {
	if x != nil {
		return x.Tongue
	}
	return ""
}

func (x *Consultation) GetPulseLeft() string {
	if x != nil {
		return x.PulseLeft
	}
	return ""
}

func (x *Consultation) GetPulseRight() string {
	if x != nil {
		return x.PulseRight
	}
	return ""
}

//药品使用情况
type DrugUsageItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                                             //药品名称
	Usage                string `protobuf:"bytes,2,opt,name=usage,proto3" json:"usage,omitempty"`                                                           //药品用法
	Dosage               string `protobuf:"bytes,3,opt,name=dosage,proto3" json:"dosage,omitempty"`                                                         //药品用量
	StartTime            string `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                  //药品使用时间/开始时间
	MedicationCompliance string `protobuf:"bytes,5,opt,name=medication_compliance,json=medicationCompliance,proto3" json:"medication_compliance,omitempty"` //药品依从性
}

func (x *DrugUsageItem) Reset() {
	*x = DrugUsageItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_medical_record_medical_record_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrugUsageItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrugUsageItem) ProtoMessage() {}

func (x *DrugUsageItem) ProtoReflect() protoreflect.Message {
	mi := &file_protos_medical_record_medical_record_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrugUsageItem.ProtoReflect.Descriptor instead.
func (*DrugUsageItem) Descriptor() ([]byte, []int) {
	return file_protos_medical_record_medical_record_proto_rawDescGZIP(), []int{24}
}

func (x *DrugUsageItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DrugUsageItem) GetUsage() string {
	if x != nil {
		return x.Usage
	}
	return ""
}

func (x *DrugUsageItem) GetDosage() string {
	if x != nil {
		return x.Dosage
	}
	return ""
}

func (x *DrugUsageItem) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *DrugUsageItem) GetMedicationCompliance() string {
	if x != nil {
		return x.MedicationCompliance
	}
	return ""
}

//危险控制因素
type HazardControlFactors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuitSmoking     int64   `protobuf:"varint,1,opt,name=quit_smoking,json=quitSmoking,proto3" json:"quit_smoking,omitempty"`             //戒烟 [1 控制|2 不控制]
	HealthyDrinking int64   `protobuf:"varint,2,opt,name=healthy_drinking,json=healthyDrinking,proto3" json:"healthy_drinking,omitempty"` //健康饮酒 [1 控制|2 不控制]
	Diet            int64   `protobuf:"varint,3,opt,name=diet,proto3" json:"diet,omitempty"`                                              //饮食 [1 控制|2 不控制]
	Exercise        int64   `protobuf:"varint,4,opt,name=exercise,proto3" json:"exercise,omitempty"`                                      //锻炼 [1 控制|2 不控制]
	TargetWeight    float64 `protobuf:"fixed64,5,opt,name=target_weight,json=targetWeight,proto3" json:"target_weight,omitempty"`         //减体重/kg
	Vaccination     string  `protobuf:"bytes,6,opt,name=vaccination,proto3" json:"vaccination,omitempty"`                                 //建议接种疫苗
	Other           string  `protobuf:"bytes,7,opt,name=other,proto3" json:"other,omitempty"`                                             //其他
	Id              int64   `protobuf:"varint,8,opt,name=id,proto3" json:"id,omitempty"`
	FlowId          int64   `protobuf:"varint,9,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"`
	Updater         string  `protobuf:"bytes,10,opt,name=updater,proto3" json:"updater,omitempty"`                         //最近操作者
	UpdateTime      string  `protobuf:"bytes,11,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"` //最近操作时间
}

func (x *HazardControlFactors) Reset() {
	*x = HazardControlFactors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_medical_record_medical_record_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HazardControlFactors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HazardControlFactors) ProtoMessage() {}

func (x *HazardControlFactors) ProtoReflect() protoreflect.Message {
	mi := &file_protos_medical_record_medical_record_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HazardControlFactors.ProtoReflect.Descriptor instead.
func (*HazardControlFactors) Descriptor() ([]byte, []int) {
	return file_protos_medical_record_medical_record_proto_rawDescGZIP(), []int{25}
}

func (x *HazardControlFactors) GetQuitSmoking() int64 {
	if x != nil {
		return x.QuitSmoking
	}
	return 0
}

func (x *HazardControlFactors) GetHealthyDrinking() int64 {
	if x != nil {
		return x.HealthyDrinking
	}
	return 0
}

func (x *HazardControlFactors) GetDiet() int64 {
	if x != nil {
		return x.Diet
	}
	return 0
}

func (x *HazardControlFactors) GetExercise() int64 {
	if x != nil {
		return x.Exercise
	}
	return 0
}

func (x *HazardControlFactors) GetTargetWeight() float64 {
	if x != nil {
		return x.TargetWeight
	}
	return 0
}

func (x *HazardControlFactors) GetVaccination() string {
	if x != nil {
		return x.Vaccination
	}
	return ""
}

func (x *HazardControlFactors) GetOther() string {
	if x != nil {
		return x.Other
	}
	return ""
}

func (x *HazardControlFactors) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HazardControlFactors) GetFlowId() int64 {
	if x != nil {
		return x.FlowId
	}
	return 0
}

func (x *HazardControlFactors) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

func (x *HazardControlFactors) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

//一般情况
type GeneralInspection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Temperature                  float64 `protobuf:"fixed64,1,opt,name=temperature,proto3" json:"temperature,omitempty"`                                                                            //体温 摄氏度
	Pulse                        int64   `protobuf:"varint,2,opt,name=pulse,proto3" json:"pulse,omitempty"`                                                                                         //脉搏
	RespiratoryRate              int64   `protobuf:"varint,3,opt,name=respiratory_rate,json=respiratoryRate,proto3" json:"respiratory_rate,omitempty"`                                              //呼吸频率
	DiastolicBloodPressure       int64   `protobuf:"varint,4,opt,name=diastolic_blood_pressure,json=diastolicBloodPressure,proto3" json:"diastolic_blood_pressure,omitempty"`                       //舒张压
	SystolicBloodPressure        int64   `protobuf:"varint,5,opt,name=systolic_blood_pressure,json=systolicBloodPressure,proto3" json:"systolic_blood_pressure,omitempty"`                          //收缩压
	Height                       float64 `protobuf:"fixed64,6,opt,name=height,proto3" json:"height,omitempty"`                                                                                      //身高
	Weight                       float64 `protobuf:"fixed64,7,opt,name=weight,proto3" json:"weight,omitempty"`                                                                                      //体重
	BMI                          float64 `protobuf:"fixed64,8,opt,name=BMI,proto3" json:"BMI,omitempty"`                                                                                            //体质指数
	SelfAssessmentOfHealthStatus int64   `protobuf:"varint,9,opt,name=self_assessment_of_health_status,json=selfAssessmentOfHealthStatus,proto3" json:"self_assessment_of_health_status,omitempty"` //健康状态自我评估 [1 满意|2 基本满意|3 说不清楚|4 不太满意|5 不满意]
	SelfCareAbility              int64   `protobuf:"varint,10,opt,name=self_care_ability,json=selfCareAbility,proto3" json:"self_care_ability,omitempty"`                                           //生活自理能力 [3 可自理|8 轻度依赖|18 中度依赖|19 不能自理]
}

func (x *GeneralInspection) Reset() {
	*x = GeneralInspection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_medical_record_medical_record_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralInspection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralInspection) ProtoMessage() {}

func (x *GeneralInspection) ProtoReflect() protoreflect.Message {
	mi := &file_protos_medical_record_medical_record_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralInspection.ProtoReflect.Descriptor instead.
func (*GeneralInspection) Descriptor() ([]byte, []int) {
	return file_protos_medical_record_medical_record_proto_rawDescGZIP(), []int{26}
}

func (x *GeneralInspection) GetTemperature() float64 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *GeneralInspection) GetPulse() int64 {
	if x != nil {
		return x.Pulse
	}
	return 0
}

func (x *GeneralInspection) GetRespiratoryRate() int64 {
	if x != nil {
		return x.RespiratoryRate
	}
	return 0
}

func (x *GeneralInspection) GetDiastolicBloodPressure() int64 {
	if x != nil {
		return x.DiastolicBloodPressure
	}
	return 0
}

func (x *GeneralInspection) GetSystolicBloodPressure() int64 {
	if x != nil {
		return x.SystolicBloodPressure
	}
	return 0
}

func (x *GeneralInspection) GetHeight() float64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *GeneralInspection) GetWeight() float64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *GeneralInspection) GetBMI() float64 {
	if x != nil {
		return x.BMI
	}
	return 0
}

func (x *GeneralInspection) GetSelfAssessmentOfHealthStatus() int64 {
	if x != nil {
		return x.SelfAssessmentOfHealthStatus
	}
	return 0
}

func (x *GeneralInspection) GetSelfCareAbility() int64 {
	if x != nil {
		return x.SelfCareAbility
	}
	return 0
}

//查体
type PhysicalExamination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fundus            int64  `protobuf:"varint,1,opt,name=fundus,proto3" json:"fundus,omitempty"`                                                   //眼底 [1 正常|2 异常]
	Skin              int64  `protobuf:"varint,2,opt,name=skin,proto3" json:"skin,omitempty"`                                                       //皮肤 [1 正常|2 潮红|3 苍白|4 发绀|5 黄染|6 色素沉着|7 其他]
	Sclera            int64  `protobuf:"varint,3,opt,name=sclera,proto3" json:"sclera,omitempty"`                                                   //巩膜 [1 正常|2 黄染|3 其他]
	LymphNodes        string `protobuf:"bytes,4,opt,name=lymph_nodes,json=lymphNodes,proto3" json:"lymph_nodes,omitempty"`                          //淋巴结 多选逗号分割 [1 未触及|2 锁骨上|3 腋窝|4 其他]
	BarrelChest       int64  `protobuf:"varint,5,opt,name=barrel_chest,json=barrelChest,proto3" json:"barrel_chest,omitempty"`                      //桶状胸(肺) [1 是|2 否]
	BreathingSound    int64  `protobuf:"varint,6,opt,name=breathing_sound,json=breathingSound,proto3" json:"breathing_sound,omitempty"`             //呼吸音(肺) [1 正常|2 异常]
	LungRales         int64  `protobuf:"varint,7,opt,name=lung_rales,json=lungRales,proto3" json:"lung_rales,omitempty"`                            //罗音(肺) [1 无|2 干罗音|3 湿罗音|4 其他]
	HeartRate         int64  `protobuf:"varint,8,opt,name=heart_rate,json=heartRate,proto3" json:"heart_rate,omitempty"`                            //心率(心脏) 次/分钟
	HeartRhythm       int64  `protobuf:"varint,9,opt,name=heart_rhythm,json=heartRhythm,proto3" json:"heart_rhythm,omitempty"`                      //心律(心脏) [1 齐|2 不齐|3 绝对不齐]
	HeartMurmur       int64  `protobuf:"varint,10,opt,name=heart_murmur,json=heartMurmur,proto3" json:"heart_murmur,omitempty"`                     //杂音(心脏) [1 有|2 无]
	Tenderness        int64  `protobuf:"varint,11,opt,name=tenderness,proto3" json:"tenderness,omitempty"`                                          //压痛(腹部) [1 有|2 无]
	AbdominalMass     int64  `protobuf:"varint,12,opt,name=abdominal_mass,json=abdominalMass,proto3" json:"abdominal_mass,omitempty"`               //包块(腹部) [1 有|2 无]
	EnlargedLiver     int64  `protobuf:"varint,13,opt,name=enlarged_liver,json=enlargedLiver,proto3" json:"enlarged_liver,omitempty"`               //肝大(腹部) [1 有|2 无]
	EnlargedSpleen    int64  `protobuf:"varint,14,opt,name=enlarged_spleen,json=enlargedSpleen,proto3" json:"enlarged_spleen,omitempty"`            //脾大(腹部) [1 有|2 无]
	ShiftingDullness  int64  `protobuf:"varint,15,opt,name=shifting_dullness,json=shiftingDullness,proto3" json:"shifting_dullness,omitempty"`      //移动性浊音(腹部) [1 有|2 无]
	LegEdema          int64  `protobuf:"varint,16,opt,name=leg_edema,json=legEdema,proto3" json:"leg_edema,omitempty"`                              //下肢水肿 [1 有|2 单侧|3 双侧部队撤|4 双侧对称]
	InstepArteryPulse int64  `protobuf:"varint,17,opt,name=instep_artery_pulse,json=instepArteryPulse,proto3" json:"instep_artery_pulse,omitempty"` //足背动脉搏动 [1 未触及|2 触及双侧对称|3 触及左侧弱或消失|4 触及右侧弱或消失]
	Anus              int64  `protobuf:"varint,18,opt,name=anus,proto3" json:"anus,omitempty"`                                                      //肛门指诊 [1 未触及|2 触及双侧对称|3 触及左侧弱或消失|4 触及右侧弱或消失]
	Breast            int64  `protobuf:"varint,19,opt,name=breast,proto3" json:"breast,omitempty"`                                                  //乳腺 [1 未见异常|2 乳房切除|3 异常泌乳|4 乳腺包块|5 其他]
	Id                int64  `protobuf:"varint,20,opt,name=id,proto3" json:"id,omitempty"`
	FlowId            int64  `protobuf:"varint,21,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"`
	Updater           string `protobuf:"bytes,22,opt,name=updater,proto3" json:"updater,omitempty"`                         //最近操作者
	UpdateTime        string `protobuf:"bytes,23,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"` //最近操作时间
}

func (x *PhysicalExamination) Reset() {
	*x = PhysicalExamination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_medical_record_medical_record_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhysicalExamination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhysicalExamination) ProtoMessage() {}

func (x *PhysicalExamination) ProtoReflect() protoreflect.Message {
	mi := &file_protos_medical_record_medical_record_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhysicalExamination.ProtoReflect.Descriptor instead.
func (*PhysicalExamination) Descriptor() ([]byte, []int) {
	return file_protos_medical_record_medical_record_proto_rawDescGZIP(), []int{27}
}

func (x *PhysicalExamination) GetFundus() int64 {
	if x != nil {
		return x.Fundus
	}
	return 0
}

func (x *PhysicalExamination) GetSkin() int64 {
	if x != nil {
		return x.Skin
	}
	return 0
}

func (x *PhysicalExamination) GetSclera() int64 {
	if x != nil {
		return x.Sclera
	}
	return 0
}

func (x *PhysicalExamination) GetLymphNodes() string {
	if x != nil {
		return x.LymphNodes
	}
	return ""
}

func (x *PhysicalExamination) GetBarrelChest() int64 {
	if x != nil {
		return x.BarrelChest
	}
	return 0
}

func (x *PhysicalExamination) GetBreathingSound() int64 {
	if x != nil {
		return x.BreathingSound
	}
	return 0
}

func (x *PhysicalExamination) GetLungRales() int64 {
	if x != nil {
		return x.LungRales
	}
	return 0
}

func (x *PhysicalExamination) GetHeartRate() int64 {
	if x != nil {
		return x.HeartRate
	}
	return 0
}

func (x *PhysicalExamination) GetHeartRhythm() int64 {
	if x != nil {
		return x.HeartRhythm
	}
	return 0
}

func (x *PhysicalExamination) GetHeartMurmur() int64 {
	if x != nil {
		return x.HeartMurmur
	}
	return 0
}

func (x *PhysicalExamination) GetTenderness() int64 {
	if x != nil {
		return x.Tenderness
	}
	return 0
}

func (x *PhysicalExamination) GetAbdominalMass() int64 {
	if x != nil {
		return x.AbdominalMass
	}
	return 0
}

func (x *PhysicalExamination) GetEnlargedLiver() int64 {
	if x != nil {
		return x.EnlargedLiver
	}
	return 0
}

func (x *PhysicalExamination) GetEnlargedSpleen() int64 {
	if x != nil {
		return x.EnlargedSpleen
	}
	return 0
}

func (x *PhysicalExamination) GetShiftingDullness() int64 {
	if x != nil {
		return x.ShiftingDullness
	}
	return 0
}

func (x *PhysicalExamination) GetLegEdema() int64 {
	if x != nil {
		return x.LegEdema
	}
	return 0
}

func (x *PhysicalExamination) GetInstepArteryPulse() int64 {
	if x != nil {
		return x.InstepArteryPulse
	}
	return 0
}

func (x *PhysicalExamination) GetAnus() int64 {
	if x != nil {
		return x.Anus
	}
	return 0
}

func (x *PhysicalExamination) GetBreast() int64 {
	if x != nil {
		return x.Breast
	}
	return 0
}

func (x *PhysicalExamination) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PhysicalExamination) GetFlowId() int64 {
	if x != nil {
		return x.FlowId
	}
	return 0
}

func (x *PhysicalExamination) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

func (x *PhysicalExamination) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

//实验室检验/辅助检查
type LaboratoryExamination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LaboratoryExamination) Reset() {
	*x = LaboratoryExamination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_medical_record_medical_record_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LaboratoryExamination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaboratoryExamination) ProtoMessage() {}

func (x *LaboratoryExamination) ProtoReflect() protoreflect.Message {
	mi := &file_protos_medical_record_medical_record_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaboratoryExamination.ProtoReflect.Descriptor instead.
func (*LaboratoryExamination) Descriptor() ([]byte, []int) {
	return file_protos_medical_record_medical_record_proto_rawDescGZIP(), []int{28}
}

//脏器功能
type Viscera struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mouth                   int64   `protobuf:"varint,1,opt,name=mouth,proto3" json:"mouth,omitempty"`                                                                         //口唇 [1 红润|2 苍白|3 发绀|4 皲裂|5 疱疹]
	Teeth                   int64   `protobuf:"varint,2,opt,name=teeth,proto3" json:"teeth,omitempty"`                                                                         //齿列 [1 正常|2 缺齿|3 龋齿|4 义齿]
	Pharynx                 int64   `protobuf:"varint,3,opt,name=pharynx,proto3" json:"pharynx,omitempty"`                                                                     //咽部 [1 无充血|2 充血|3 淋巴滤泡增生]
	LeftEyeVision           float64 `protobuf:"fixed64,4,opt,name=left_eye_vision,json=leftEyeVision,proto3" json:"left_eye_vision,omitempty"`                                 //左眼视力
	LeftEyeCorrectedVision  float64 `protobuf:"fixed64,5,opt,name=left_eye_corrected_vision,json=leftEyeCorrectedVision,proto3" json:"left_eye_corrected_vision,omitempty"`    //左眼矫正视力
	RightEyeVision          float64 `protobuf:"fixed64,6,opt,name=right_eye_vision,json=rightEyeVision,proto3" json:"right_eye_vision,omitempty"`                              //右眼视力
	RightEyeCorrectedVision float64 `protobuf:"fixed64,7,opt,name=right_eye_corrected_vision,json=rightEyeCorrectedVision,proto3" json:"right_eye_corrected_vision,omitempty"` //右眼矫正视力
	Hearing                 int64   `protobuf:"varint,8,opt,name=hearing,proto3" json:"hearing,omitempty"`                                                                     //听力 [1 听见|2 听不清或者无法听见]
	SportsAbility           int64   `protobuf:"varint,9,opt,name=sports_ability,json=sportsAbility,proto3" json:"sports_ability,omitempty"`                                    //运动功能 [1 可顺利完成|2 无法独立完成任何一个工作]
	Id                      int64   `protobuf:"varint,10,opt,name=id,proto3" json:"id,omitempty"`
	FlowId                  int64   `protobuf:"varint,11,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"`
	Updater                 string  `protobuf:"bytes,12,opt,name=updater,proto3" json:"updater,omitempty"`                         //最近操作者
	UpdateTime              string  `protobuf:"bytes,13,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"` //最近操作时间
}

func (x *Viscera) Reset() {
	*x = Viscera{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_medical_record_medical_record_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Viscera) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Viscera) ProtoMessage() {}

func (x *Viscera) ProtoReflect() protoreflect.Message {
	mi := &file_protos_medical_record_medical_record_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Viscera.ProtoReflect.Descriptor instead.
func (*Viscera) Descriptor() ([]byte, []int) {
	return file_protos_medical_record_medical_record_proto_rawDescGZIP(), []int{29}
}

func (x *Viscera) GetMouth() int64 {
	if x != nil {
		return x.Mouth
	}
	return 0
}

func (x *Viscera) GetTeeth() int64 {
	if x != nil {
		return x.Teeth
	}
	return 0
}

func (x *Viscera) GetPharynx() int64 {
	if x != nil {
		return x.Pharynx
	}
	return 0
}

func (x *Viscera) GetLeftEyeVision() float64 {
	if x != nil {
		return x.LeftEyeVision
	}
	return 0
}

func (x *Viscera) GetLeftEyeCorrectedVision() float64 {
	if x != nil {
		return x.LeftEyeCorrectedVision
	}
	return 0
}

func (x *Viscera) GetRightEyeVision() float64 {
	if x != nil {
		return x.RightEyeVision
	}
	return 0
}

func (x *Viscera) GetRightEyeCorrectedVision() float64 {
	if x != nil {
		return x.RightEyeCorrectedVision
	}
	return 0
}

func (x *Viscera) GetHearing() int64 {
	if x != nil {
		return x.Hearing
	}
	return 0
}

func (x *Viscera) GetSportsAbility() int64 {
	if x != nil {
		return x.SportsAbility
	}
	return 0
}

func (x *Viscera) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Viscera) GetFlowId() int64 {
	if x != nil {
		return x.FlowId
	}
	return 0
}

func (x *Viscera) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

func (x *Viscera) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

//健康评价
type HealthAssessment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     int64  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`    //状态 [1 体检无异常|2 有异常]
	Evaluate   string `protobuf:"bytes,2,opt,name=evaluate,proto3" json:"evaluate,omitempty"` //评价内容
	Id         int64  `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	FlowId     int64  `protobuf:"varint,4,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"`
	UpdateTime string `protobuf:"bytes,5,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *HealthAssessment) Reset() {
	*x = HealthAssessment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_medical_record_medical_record_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthAssessment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthAssessment) ProtoMessage() {}

func (x *HealthAssessment) ProtoReflect() protoreflect.Message {
	mi := &file_protos_medical_record_medical_record_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthAssessment.ProtoReflect.Descriptor instead.
func (*HealthAssessment) Descriptor() ([]byte, []int) {
	return file_protos_medical_record_medical_record_proto_rawDescGZIP(), []int{30}
}

func (x *HealthAssessment) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *HealthAssessment) GetEvaluate() string {
	if x != nil {
		return x.Evaluate
	}
	return ""
}

func (x *HealthAssessment) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HealthAssessment) GetFlowId() int64 {
	if x != nil {
		return x.FlowId
	}
	return 0
}

func (x *HealthAssessment) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

//外治方案条目
type ExternalTreatmentPlanItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                       //方案编号
	DoctorId          string `protobuf:"bytes,2,opt,name=doctor_id,json=doctorId,proto3" json:"doctor_id,omitempty"`                            //医生id
	DoctorName        string `protobuf:"bytes,3,opt,name=doctor_name,json=doctorName,proto3" json:"doctor_name,omitempty"`                      //医生名字
	EntryName         string `protobuf:"bytes,4,opt,name=entry_name,json=entryName,proto3" json:"entry_name,omitempty"`                         //项目名称
	TreatmentDuration string `protobuf:"bytes,5,opt,name=treatment_duration,json=treatmentDuration,proto3" json:"treatment_duration,omitempty"` //治疗时长
	Operator          string `protobuf:"bytes,6,opt,name=operator,proto3" json:"operator,omitempty"`                                            //理疗师
	CreateTime        string `protobuf:"bytes,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                      //开方时间
	Status            int64  `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`                                               //状态  [1 进行中|2 已完成|3 已失效]
	StoreId           string `protobuf:"bytes,9,opt,name=store_id,json=storeId,proto3" json:"store_id,omitempty"`                               //门店id
	StoreName         string `protobuf:"bytes,10,opt,name=store_name,json=storeName,proto3" json:"store_name,omitempty"`                        //门店名称
	Diagnosis         string `protobuf:"bytes,11,opt,name=diagnosis,proto3" json:"diagnosis,omitempty"`                                         //证候诊断
}

func (x *ExternalTreatmentPlanItem) Reset() {
	*x = ExternalTreatmentPlanItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_medical_record_medical_record_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalTreatmentPlanItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalTreatmentPlanItem) ProtoMessage() {}

func (x *ExternalTreatmentPlanItem) ProtoReflect() protoreflect.Message {
	mi := &file_protos_medical_record_medical_record_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalTreatmentPlanItem.ProtoReflect.Descriptor instead.
func (*ExternalTreatmentPlanItem) Descriptor() ([]byte, []int) {
	return file_protos_medical_record_medical_record_proto_rawDescGZIP(), []int{31}
}

func (x *ExternalTreatmentPlanItem) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ExternalTreatmentPlanItem) GetDoctorId() string {
	if x != nil {
		return x.DoctorId
	}
	return ""
}

func (x *ExternalTreatmentPlanItem) GetDoctorName() string {
	if x != nil {
		return x.DoctorName
	}
	return ""
}

func (x *ExternalTreatmentPlanItem) GetEntryName() string {
	if x != nil {
		return x.EntryName
	}
	return ""
}

func (x *ExternalTreatmentPlanItem) GetTreatmentDuration() string {
	if x != nil {
		return x.TreatmentDuration
	}
	return ""
}

func (x *ExternalTreatmentPlanItem) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *ExternalTreatmentPlanItem) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ExternalTreatmentPlanItem) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ExternalTreatmentPlanItem) GetStoreId() string {
	if x != nil {
		return x.StoreId
	}
	return ""
}

func (x *ExternalTreatmentPlanItem) GetStoreName() string {
	if x != nil {
		return x.StoreName
	}
	return ""
}

func (x *ExternalTreatmentPlanItem) GetDiagnosis() string {
	if x != nil {
		return x.Diagnosis
	}
	return ""
}

//职业病危害因素接触 Exposure to occupational hazards
type ExposureToOccupationalHazard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	FlowId             int64  `protobuf:"varint,2,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"`
	PoisonType         string `protobuf:"bytes,3,opt,name=poison_type,json=poisonType,proto3" json:"poison_type,omitempty"`                          //毒物类型/名称
	ProtectiveMeasures int64  `protobuf:"varint,4,opt,name=protective_measures,json=protectiveMeasures,proto3" json:"protective_measures,omitempty"` //是否有防护措施 [1 有|2 无]
	Updater            string `protobuf:"bytes,5,opt,name=updater,proto3" json:"updater,omitempty"`                                                  //最近操作者
	UpdateTime         string `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`                          //最近操作时间
}

func (x *ExposureToOccupationalHazard) Reset() {
	*x = ExposureToOccupationalHazard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_medical_record_medical_record_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExposureToOccupationalHazard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExposureToOccupationalHazard) ProtoMessage() {}

func (x *ExposureToOccupationalHazard) ProtoReflect() protoreflect.Message {
	mi := &file_protos_medical_record_medical_record_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExposureToOccupationalHazard.ProtoReflect.Descriptor instead.
func (*ExposureToOccupationalHazard) Descriptor() ([]byte, []int) {
	return file_protos_medical_record_medical_record_proto_rawDescGZIP(), []int{32}
}

func (x *ExposureToOccupationalHazard) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ExposureToOccupationalHazard) GetFlowId() int64 {
	if x != nil {
		return x.FlowId
	}
	return 0
}

func (x *ExposureToOccupationalHazard) GetPoisonType() string {
	if x != nil {
		return x.PoisonType
	}
	return ""
}

func (x *ExposureToOccupationalHazard) GetProtectiveMeasures() int64 {
	if x != nil {
		return x.ProtectiveMeasures
	}
	return 0
}

func (x *ExposureToOccupationalHazard) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

func (x *ExposureToOccupationalHazard) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

//住院治疗记录
type HospitalizationRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	FlowId              int64  `protobuf:"varint,2,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"`
	AdmissionTime       string `protobuf:"bytes,3,opt,name=admission_time,json=admissionTime,proto3" json:"admission_time,omitempty"`                     //入院时间
	DischargeTime       string `protobuf:"bytes,4,opt,name=discharge_time,json=dischargeTime,proto3" json:"discharge_time,omitempty"`                     //住院时间
	HospitalName        string `protobuf:"bytes,5,opt,name=hospital_name,json=hospitalName,proto3" json:"hospital_name,omitempty"`                        //医院名称
	MedicalRecordNumber string `protobuf:"bytes,6,opt,name=medical_record_number,json=medicalRecordNumber,proto3" json:"medical_record_number,omitempty"` //病案号
	Reason              string `protobuf:"bytes,7,opt,name=reason,proto3" json:"reason,omitempty"`                                                        //原因
	Updater             string `protobuf:"bytes,8,opt,name=updater,proto3" json:"updater,omitempty"`                                                      //最近操作者
	UpdateTime          string `protobuf:"bytes,9,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`                              //最近操作时间
}

func (x *HospitalizationRecord) Reset() {
	*x = HospitalizationRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_medical_record_medical_record_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HospitalizationRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HospitalizationRecord) ProtoMessage() {}

func (x *HospitalizationRecord) ProtoReflect() protoreflect.Message {
	mi := &file_protos_medical_record_medical_record_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HospitalizationRecord.ProtoReflect.Descriptor instead.
func (*HospitalizationRecord) Descriptor() ([]byte, []int) {
	return file_protos_medical_record_medical_record_proto_rawDescGZIP(), []int{33}
}

func (x *HospitalizationRecord) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HospitalizationRecord) GetFlowId() int64 {
	if x != nil {
		return x.FlowId
	}
	return 0
}

func (x *HospitalizationRecord) GetAdmissionTime() string {
	if x != nil {
		return x.AdmissionTime
	}
	return ""
}

func (x *HospitalizationRecord) GetDischargeTime() string {
	if x != nil {
		return x.DischargeTime
	}
	return ""
}

func (x *HospitalizationRecord) GetHospitalName() string {
	if x != nil {
		return x.HospitalName
	}
	return ""
}

func (x *HospitalizationRecord) GetMedicalRecordNumber() string {
	if x != nil {
		return x.MedicalRecordNumber
	}
	return ""
}

func (x *HospitalizationRecord) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *HospitalizationRecord) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

func (x *HospitalizationRecord) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

//非免疫规则预防接种历史
type VaccinationHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	FlowId               int64  `protobuf:"varint,2,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"`
	VaccinationName      string `protobuf:"bytes,3,opt,name=vaccination_name,json=vaccinationName,proto3" json:"vaccination_name,omitempty"`                //接种疫苗名称
	VaccinationDate      string `protobuf:"bytes,4,opt,name=vaccination_date,json=vaccinationDate,proto3" json:"vaccination_date,omitempty"`                //接种疫苗时间
	VaccinationMechanism string `protobuf:"bytes,5,opt,name=vaccination_mechanism,json=vaccinationMechanism,proto3" json:"vaccination_mechanism,omitempty"` //接种疫苗机构
	Updater              string `protobuf:"bytes,6,opt,name=updater,proto3" json:"updater,omitempty"`                                                       //最近操作者
	UpdateTime           string `protobuf:"bytes,7,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`                               //最近操作时间
}

func (x *VaccinationHistory) Reset() {
	*x = VaccinationHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_medical_record_medical_record_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VaccinationHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VaccinationHistory) ProtoMessage() {}

func (x *VaccinationHistory) ProtoReflect() protoreflect.Message {
	mi := &file_protos_medical_record_medical_record_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VaccinationHistory.ProtoReflect.Descriptor instead.
func (*VaccinationHistory) Descriptor() ([]byte, []int) {
	return file_protos_medical_record_medical_record_proto_rawDescGZIP(), []int{34}
}

func (x *VaccinationHistory) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VaccinationHistory) GetFlowId() int64 {
	if x != nil {
		return x.FlowId
	}
	return 0
}

func (x *VaccinationHistory) GetVaccinationName() string {
	if x != nil {
		return x.VaccinationName
	}
	return ""
}

func (x *VaccinationHistory) GetVaccinationDate() string {
	if x != nil {
		return x.VaccinationDate
	}
	return ""
}

func (x *VaccinationHistory) GetVaccinationMechanism() string {
	if x != nil {
		return x.VaccinationMechanism
	}
	return ""
}

func (x *VaccinationHistory) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

func (x *VaccinationHistory) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

//生活环境
type LivingEnvironment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	FlowId     int64  `protobuf:"varint,2,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"`
	FactorName string `protobuf:"bytes,3,opt,name=factor_name,json=factorName,proto3" json:"factor_name,omitempty"` //类型/因素名称
	Situation  string `protobuf:"bytes,4,opt,name=situation,proto3" json:"situation,omitempty"`                     //情况
	Updater    string `protobuf:"bytes,5,opt,name=updater,proto3" json:"updater,omitempty"`                         //最近操作者
	UpdateTime string `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"` //最近操作时间
}

func (x *LivingEnvironment) Reset() {
	*x = LivingEnvironment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_medical_record_medical_record_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LivingEnvironment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LivingEnvironment) ProtoMessage() {}

func (x *LivingEnvironment) ProtoReflect() protoreflect.Message {
	mi := &file_protos_medical_record_medical_record_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LivingEnvironment.ProtoReflect.Descriptor instead.
func (*LivingEnvironment) Descriptor() ([]byte, []int) {
	return file_protos_medical_record_medical_record_proto_rawDescGZIP(), []int{35}
}

func (x *LivingEnvironment) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LivingEnvironment) GetFlowId() int64 {
	if x != nil {
		return x.FlowId
	}
	return 0
}

func (x *LivingEnvironment) GetFactorName() string {
	if x != nil {
		return x.FactorName
	}
	return ""
}

func (x *LivingEnvironment) GetSituation() string {
	if x != nil {
		return x.Situation
	}
	return ""
}

func (x *LivingEnvironment) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

func (x *LivingEnvironment) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type DiagnosisInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	FlowId          int64  `protobuf:"varint,2,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"`
	UpdateTime      string `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Tcm             string `protobuf:"bytes,4,opt,name=tcm,proto3" json:"tcm,omitempty"` // 中医诊断 保存的是字符串数组["肾虚", "心虚"]
	Ibd             string `protobuf:"bytes,5,opt,name=ibd,proto3" json:"ibd,omitempty"` // 西医诊断 保存的是字符串数组
	TreatmentAdvise string `protobuf:"bytes,6,opt,name=treatment_advise,json=treatmentAdvise,proto3" json:"treatment_advise,omitempty"`
}

func (x *DiagnosisInfo) Reset() {
	*x = DiagnosisInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_medical_record_medical_record_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiagnosisInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiagnosisInfo) ProtoMessage() {}

func (x *DiagnosisInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protos_medical_record_medical_record_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiagnosisInfo.ProtoReflect.Descriptor instead.
func (*DiagnosisInfo) Descriptor() ([]byte, []int) {
	return file_protos_medical_record_medical_record_proto_rawDescGZIP(), []int{36}
}

func (x *DiagnosisInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DiagnosisInfo) GetFlowId() int64 {
	if x != nil {
		return x.FlowId
	}
	return 0
}

func (x *DiagnosisInfo) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *DiagnosisInfo) GetTcm() string {
	if x != nil {
		return x.Tcm
	}
	return ""
}

func (x *DiagnosisInfo) GetIbd() string {
	if x != nil {
		return x.Ibd
	}
	return ""
}

func (x *DiagnosisInfo) GetTreatmentAdvise() string {
	if x != nil {
		return x.TreatmentAdvise
	}
	return ""
}

var File_protos_medical_record_medical_record_proto protoreflect.FileDescriptor

var file_protos_medical_record_medical_record_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7f, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64,
	0x12, 0x44, 0x0a, 0x0e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x69, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x69, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xbd, 0x01, 0x0a, 0x27, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x70,
	0x6f, 0x73, 0x75, 0x72, 0x65, 0x48, 0x61, 0x7a, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12,
	0x75, 0x0a, 0x20, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x6f,
	0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x68, 0x61, 0x7a, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x73,
	0x75, 0x72, 0x65, 0x54, 0x6f, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x48, 0x61, 0x7a, 0x61, 0x72, 0x64, 0x52, 0x1d, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72,
	0x65, 0x54, 0x6f, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x48,
	0x61, 0x7a, 0x61, 0x72, 0x64, 0x73, 0x22, 0x63, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x69, 0x65, 0x66, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x68, 0x69, 0x65, 0x66, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x68, 0x69,
	0x65, 0x66, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x22, 0x8b, 0x01, 0x0a, 0x1d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x41, 0x73, 0x73, 0x65,
	0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x11, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x41, 0x73, 0x73,
	0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x41,
	0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x66, 0x0a, 0x14, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x56, 0x69, 0x73, 0x63, 0x65, 0x72, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x31,
	0x0a, 0x07, 0x76, 0x69, 0x73, 0x63, 0x65, 0x72, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x56, 0x69, 0x73, 0x63, 0x65, 0x72, 0x61, 0x52, 0x07, 0x76, 0x69, 0x73, 0x63, 0x65, 0x72,
	0x61, 0x22, 0x9c, 0x01, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x61, 0x7a, 0x61,
	0x72, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x16, 0x68, 0x61, 0x7a, 0x61, 0x72, 0x64, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x48, 0x61, 0x7a, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x14, 0x68, 0x61, 0x7a, 0x61,
	0x72, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x22, 0x7a, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0c, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6c, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x97, 0x01, 0x0a,
	0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x45,
	0x78, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x56,
	0x0a, 0x14, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x13, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x61, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x76, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x3f, 0x0a,
	0x0a, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x09, 0x62, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x60,
	0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x22, 0x6f, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x66, 0x65, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0a, 0x6c, 0x69, 0x66, 0x65, 0x5f,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x4c, 0x69, 0x66,
	0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x09, 0x6c, 0x69, 0x66, 0x65, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x22, 0x6a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x2d, 0x0a,
	0x0e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x22, 0xa7, 0x01, 0x0a,
	0x12, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x4e, 0x6f, 0x22, 0x61, 0x0a, 0x13, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x70, 0x0a, 0x0f, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64,
	0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64,
	0x61, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x22, 0x29, 0x0a, 0x0a, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x22, 0xd1, 0x03, 0x0a, 0x0d, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x69,
	0x73, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x74, 0x74, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x44,
	0x6f, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x74, 0x74, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74,
	0x63, 0x6d, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x74, 0x63, 0x6d, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x69, 0x62, 0x64, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x62, 0x64, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x69, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x76, 0x69, 0x73, 0x69,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x56, 0x69,
	0x73, 0x69, 0x74, 0x12, 0x44, 0x0a, 0x0e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x22, 0x5e, 0x0a, 0x11, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x33, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x81, 0x02, 0x0a, 0x0e, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6e, 0x6f, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68,
	0x64, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68,
	0x64, 0x61, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xad,
	0x0d, 0x0a, 0x11, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3f, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x62, 0x61, 0x73, 0x69,
	0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x72, 0x75, 0x67, 0x5f, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x72, 0x75, 0x67, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x6f, 0x73,
	0x75, 0x72, 0x65, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x5f, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x65, 0x6e,
	0x65, 0x74, 0x69, 0x63, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x61, 0x73, 0x74, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x61, 0x73, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x25,
	0x0a, 0x0e, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x0a, 0x6c, 0x69, 0x66, 0x65, 0x5f, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x4c, 0x69, 0x66, 0x65, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x52, 0x09, 0x6c, 0x69, 0x66, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12,
	0x40, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x47, 0x0a, 0x10, 0x64, 0x72, 0x75, 0x67, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x44, 0x72, 0x75,
	0x67, 0x55, 0x73, 0x61, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0e, 0x64, 0x72, 0x75, 0x67,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x68,
	0x69, 0x65, 0x66, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x68, 0x69, 0x65, 0x66, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x12, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x69,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x16, 0x68, 0x61, 0x7a, 0x61, 0x72, 0x64, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x48, 0x61, 0x7a, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x14, 0x68, 0x61, 0x7a,
	0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x12, 0x56, 0x0a, 0x14, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x65, 0x78,
	0x61, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78,
	0x61, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x16, 0x6c, 0x61, 0x62,
	0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x4c, 0x61, 0x62, 0x6f, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x15, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x78, 0x61, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x07, 0x76, 0x69, 0x73, 0x63, 0x65,
	0x72, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x56, 0x69, 0x73, 0x63, 0x65, 0x72,
	0x61, 0x52, 0x07, 0x76, 0x69, 0x73, 0x63, 0x65, 0x72, 0x61, 0x12, 0x4d, 0x0a, 0x11, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x41, 0x73, 0x73,
	0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x41,
	0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x6c, 0x0a, 0x1d, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x72, 0x65, 0x61, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x1a, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c,
	0x61, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x67, 0x0a, 0x1e, 0x76, 0x61, 0x63, 0x63, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x56, 0x61, 0x63, 0x63, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x1b, 0x76, 0x61, 0x63, 0x63, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x12, 0x67, 0x0a, 0x1c, 0x68, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x48, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x1a, 0x68,
	0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x7e, 0x0a, 0x25, 0x65, 0x78, 0x70,
	0x6f, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x68, 0x61, 0x7a, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75,
	0x72, 0x65, 0x54, 0x6f, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x48, 0x61, 0x7a, 0x61, 0x72, 0x64, 0x52, 0x21, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65,
	0x54, 0x6f, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x48, 0x61,
	0x7a, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x5b, 0x0a, 0x18, 0x6c, 0x69, 0x76,
	0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x4c, 0x69, 0x76,
	0x69, 0x6e, 0x67, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x16,
	0x6c, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x50, 0x0a, 0x17, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x2e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x15, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x44, 0x0a, 0x0e, 0x64, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0d, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x9f,
	0x03, 0x0a, 0x10, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x62,
	0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62,
	0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x64, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x72, 0x65, 0x65, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x61, 0x72, 0x65, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x6f,
	0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62,
	0x6c, 0x6f, 0x6f, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x64, 0x75,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x72, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x61, 0x72, 0x69,
	0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x22, 0xc8, 0x05, 0x0a, 0x09, 0x4c, 0x69, 0x66, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x2d,
	0x0a, 0x12, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x65, 0x78, 0x65, 0x72,
	0x63, 0x69, 0x73, 0x65, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2b, 0x0a,
	0x11, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69,
	0x73, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78,
	0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x43, 0x79, 0x63, 0x6c,
	0x65, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x5f, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x65,
	0x72, 0x63, 0x69, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x61, 0x62, 0x69, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x61, 0x62, 0x69, 0x74,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x61, 0x69, 0x6c, 0x79,
	0x5f, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x6d, 0x6f, 0x6b, 0x65, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73,
	0x6d, 0x6f, 0x6b, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x6d, 0x6f, 0x6b, 0x65, 0x41, 0x67, 0x65, 0x12, 0x22, 0x0a,
	0x0d, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x53, 0x6d, 0x6f, 0x6b, 0x65, 0x41, 0x67,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x72, 0x69, 0x6e, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x64, 0x72, 0x69, 0x6e, 0x6b, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x61, 0x69, 0x6c, 0x79,
	0x5f, 0x64, 0x72, 0x69, 0x6e, 0x6b, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x44, 0x72, 0x69, 0x6e, 0x6b, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x69, 0x74, 0x5f, 0x64, 0x72,
	0x69, 0x6e, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x71, 0x75, 0x69, 0x74, 0x44,
	0x72, 0x69, 0x6e, 0x6b, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x72,
	0x69, 0x6e, 0x6b, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x44, 0x72, 0x69, 0x6e, 0x6b, 0x41, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0d,
	0x65, 0x6e, 0x64, 0x5f, 0x64, 0x72, 0x69, 0x6e, 0x6b, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x44, 0x72, 0x69, 0x6e, 0x6b, 0x41, 0x67, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x70, 0x61, 0x73, 0x74, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x5f, 0x64, 0x72,
	0x69, 0x6e, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x61, 0x73, 0x74, 0x59,
	0x65, 0x61, 0x72, 0x44, 0x72, 0x69, 0x6e, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x72, 0x69, 0x6e,
	0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x72,
	0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x7a, 0x0a, 0x0c, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x61, 0x63, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x6f, 0x6e, 0x67, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x6f, 0x6e, 0x67, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x6c, 0x73, 0x65,
	0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x6c,
	0x73, 0x65, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x75, 0x6c,
	0x73, 0x65, 0x52, 0x69, 0x67, 0x68, 0x74, 0x22, 0xa5, 0x01, 0x0a, 0x0d, 0x44, 0x72, 0x75, 0x67,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x15, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x22,
	0xd5, 0x02, 0x0a, 0x14, 0x48, 0x61, 0x7a, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x69, 0x74,
	0x5f, 0x73, 0x6d, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x71, 0x75, 0x69, 0x74, 0x53, 0x6d, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x5f, 0x64, 0x72, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x44, 0x72,
	0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x69, 0x65, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x69, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78,
	0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x65, 0x78,
	0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x76,
	0x61, 0x63, 0x63, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x76, 0x61, 0x63, 0x63, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x9e, 0x03, 0x0a, 0x11, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a,
	0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x70, 0x75, 0x6c, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x72, 0x65, 0x73, 0x70, 0x69, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x38, 0x0a, 0x18, 0x64, 0x69, 0x61, 0x73, 0x74, 0x6f, 0x6c, 0x69, 0x63, 0x5f, 0x62, 0x6c,
	0x6f, 0x6f, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x16, 0x64, 0x69, 0x61, 0x73, 0x74, 0x6f, 0x6c, 0x69, 0x63, 0x42, 0x6c, 0x6f,
	0x6f, 0x64, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x79,
	0x73, 0x74, 0x6f, 0x6c, 0x69, 0x63, 0x5f, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x73, 0x79, 0x73,
	0x74, 0x6f, 0x6c, 0x69, 0x63, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75,
	0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x42, 0x4d, 0x49, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x03, 0x42, 0x4d, 0x49, 0x12, 0x46, 0x0a, 0x20, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x61, 0x73, 0x73,
	0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c,
	0x73, 0x65, 0x6c, 0x66, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x66,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x11,
	0x73, 0x65, 0x6c, 0x66, 0x5f, 0x63, 0x61, 0x72, 0x65, 0x5f, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x65, 0x6c, 0x66, 0x43, 0x61, 0x72,
	0x65, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x22, 0xeb, 0x05, 0x0a, 0x13, 0x50, 0x68, 0x79,
	0x73, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x75, 0x6e, 0x64, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x66, 0x75, 0x6e, 0x64, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x63, 0x6c, 0x65, 0x72, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x63,
	0x6c, 0x65, 0x72, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x79, 0x6d, 0x70, 0x68, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x79, 0x6d, 0x70, 0x68,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x72, 0x72, 0x65, 0x6c, 0x5f,
	0x63, 0x68, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x61, 0x72,
	0x72, 0x65, 0x6c, 0x43, 0x68, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x72, 0x65, 0x61,
	0x74, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x62, 0x72, 0x65, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x75, 0x6e,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x75, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6c, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x75, 0x6e, 0x67, 0x52, 0x61, 0x6c, 0x65, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x65, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x68, 0x79, 0x74, 0x68, 0x6d, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x72, 0x74, 0x52, 0x68, 0x79, 0x74,
	0x68, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x72, 0x74, 0x5f, 0x6d, 0x75, 0x72, 0x6d,
	0x75, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x72, 0x74, 0x4d,
	0x75, 0x72, 0x6d, 0x75, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x6e,
	0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x62, 0x64, 0x6f, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61,
	0x62, 0x64, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x65, 0x6e, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x65, 0x6e, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x64, 0x4c, 0x69,
	0x76, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x6e, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x64, 0x5f,
	0x73, 0x70, 0x6c, 0x65, 0x65, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x65, 0x6e,
	0x6c, 0x61, 0x72, 0x67, 0x65, 0x64, 0x53, 0x70, 0x6c, 0x65, 0x65, 0x6e, 0x12, 0x2b, 0x0a, 0x11,
	0x73, 0x68, 0x69, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x75, 0x6c, 0x6c, 0x6e, 0x65, 0x73,
	0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x68, 0x69, 0x66, 0x74, 0x69, 0x6e,
	0x67, 0x44, 0x75, 0x6c, 0x6c, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x67,
	0x5f, 0x65, 0x64, 0x65, 0x6d, 0x61, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x65,
	0x67, 0x45, 0x64, 0x65, 0x6d, 0x61, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x73, 0x74, 0x65, 0x70,
	0x5f, 0x61, 0x72, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x11, 0x69, 0x6e, 0x73, 0x74, 0x65, 0x70, 0x41, 0x72, 0x74, 0x65, 0x72,
	0x79, 0x50, 0x75, 0x6c, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x6e, 0x75, 0x73, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x61, 0x6e, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72,
	0x65, 0x61, 0x73, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x62, 0x72, 0x65, 0x61,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x17, 0x0a, 0x15, 0x4c, 0x61, 0x62, 0x6f, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x79, 0x45, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xbe, 0x03, 0x0a, 0x07, 0x56, 0x69, 0x73, 0x63, 0x65, 0x72, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x6f, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x6f, 0x75, 0x74,
	0x68, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x65, 0x65, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x65, 0x65, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x68, 0x61, 0x72, 0x79,
	0x6e, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x68, 0x61, 0x72, 0x79, 0x6e,
	0x78, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x65, 0x79, 0x65, 0x5f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6c, 0x65, 0x66, 0x74,
	0x45, 0x79, 0x65, 0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x19, 0x6c, 0x65, 0x66,
	0x74, 0x5f, 0x65, 0x79, 0x65, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x6c, 0x65,
	0x66, 0x74, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x65, 0x79,
	0x65, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x45, 0x79, 0x65, 0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b,
	0x0a, 0x1a, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x65, 0x79, 0x65, 0x5f, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x17, 0x72, 0x69, 0x67, 0x68, 0x74, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x68,
	0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x68, 0x65,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66,
	0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x12,
	0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x90, 0x01, 0x0a, 0x10, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x41, 0x73, 0x73, 0x65, 0x73,
	0x73, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x77,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0xe4, 0x02, 0x0a, 0x19, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x54, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d,
	0x0a, 0x12, 0x74, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x72, 0x65, 0x61,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x22, 0xd4, 0x01, 0x0a, 0x1c, 0x45,
	0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x54, 0x6f, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x48, 0x61, 0x7a, 0x61, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x6c,
	0x6f, 0x77, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x69, 0x73, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72,
	0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0xba, 0x02, 0x0a, 0x15, 0x48, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x6c,
	0x6f, 0x77, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x64,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64,
	0x69, 0x73, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x6f, 0x73, 0x70, 0x69,
	0x74, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x83,
	0x02, 0x0a, 0x12, 0x56, 0x61, 0x63, 0x63, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x29,
	0x0a, 0x10, 0x76, 0x61, 0x63, 0x63, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x61, 0x63, 0x63, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x76, 0x61, 0x63,
	0x63, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x61, 0x63, 0x63, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x15, 0x76, 0x61, 0x63, 0x63, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x76, 0x61, 0x63, 0x63, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0xb6, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x6c, 0x6f,
	0x77, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x74, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa8, 0x01,
	0x0a, 0x0d, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x63, 0x6d,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x63, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x62, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x62, 0x64, 0x12, 0x29, 0x0a,
	0x10, 0x74, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x73,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x64, 0x76, 0x69, 0x73, 0x65, 0x2a, 0x2d, 0x0a, 0x0d, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x4e, 0x41,
	0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x52, 0x43,
	0x48, 0x49, 0x56, 0x45, 0x44, 0x10, 0x01, 0x32, 0xe7, 0x0b, 0x0a, 0x14, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x52, 0x0a, 0x0f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x1f, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x12, 0x56, 0x0a, 0x0b, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x22, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x12, 0x28, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x47,
	0x0a, 0x0d, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x1e, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x57, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x1a, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x5e, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x26, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x66, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x2a, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x51, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x66, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x26, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x66, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x57, 0x0a, 0x12, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x29, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x65, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x30, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61,
	0x6c, 0x45, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x67, 0x0a, 0x1a, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x61, 0x7a, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x31, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x48, 0x61, 0x7a, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x4d, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69,
	0x73, 0x63, 0x65, 0x72, 0x61, 0x12, 0x24, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69, 0x73,
	0x63, 0x65, 0x72, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x5f, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x41, 0x73, 0x73, 0x65, 0x73,
	0x73, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x5b, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x69, 0x65, 0x66, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x2b, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x69, 0x65, 0x66, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x73, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x63, 0x63, 0x75, 0x70,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x48,
	0x61, 0x7a, 0x61, 0x72, 0x64, 0x12, 0x37, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x63, 0x63,
	0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72,
	0x65, 0x48, 0x61, 0x7a, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x59, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x42, 0x1d, 0x5a, 0x1b, 0x6e, 0x61, 0x67, 0x79, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protos_medical_record_medical_record_proto_rawDescOnce sync.Once
	file_protos_medical_record_medical_record_proto_rawDescData = file_protos_medical_record_medical_record_proto_rawDesc
)

func file_protos_medical_record_medical_record_proto_rawDescGZIP() []byte {
	file_protos_medical_record_medical_record_proto_rawDescOnce.Do(func() {
		file_protos_medical_record_medical_record_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_medical_record_medical_record_proto_rawDescData)
	})
	return file_protos_medical_record_medical_record_proto_rawDescData
}

var file_protos_medical_record_medical_record_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_protos_medical_record_medical_record_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_protos_medical_record_medical_record_proto_goTypes = []interface{}{
	(ArchiveStatus)(0),                              // 0: medical_record.ArchiveStatus
	(*UpdateDiagnosisInfoRequest)(nil),              // 1: medical_record.UpdateDiagnosisInfoRequest
	(*UpdateOccupationalExposureHazardRequest)(nil), // 2: medical_record.UpdateOccupationalExposureHazardRequest
	(*UpdateChiefComplaintRequest)(nil),             // 3: medical_record.UpdateChiefComplaintRequest
	(*UpdateHealthAssessmentRequest)(nil),           // 4: medical_record.UpdateHealthAssessmentRequest
	(*UpdateVisceraRequest)(nil),                    // 5: medical_record.UpdateVisceraRequest
	(*UpdateHazardControlFactorsRequest)(nil),       // 6: medical_record.UpdateHazardControlFactorsRequest
	(*UpdateConsultationRequest)(nil),               // 7: medical_record.UpdateConsultationRequest
	(*UpdatePhysicalExaminationRequest)(nil),        // 8: medical_record.UpdatePhysicalExaminationRequest
	(*UpdateBasicInfoRequest)(nil),                  // 9: medical_record.UpdateBasicInfoRequest
	(*UpdateFamilyHistoryRequest)(nil),              // 10: medical_record.UpdateFamilyHistoryRequest
	(*UpdateLifeStyleRequest)(nil),                  // 11: medical_record.UpdateLifeStyleRequest
	(*GetMedicalRecordsRequest)(nil),                // 12: medical_record.GetMedicalRecordsRequest
	(*ArchiveRequest)(nil),                          // 13: medical_record.ArchiveRequest
	(*ArchiveListRequest)(nil),                      // 14: medical_record.ArchiveListRequest
	(*ArchiveListResponse)(nil),                     // 15: medical_record.ArchiveListResponse
	(*GenerateRequest)(nil),                         // 16: medical_record.GenerateRequest
	(*GetRequest)(nil),                              // 17: medical_record.GetRequest
	(*MedicalRecord)(nil),                           // 18: medical_record.MedicalRecord
	(*MedicalRecordList)(nil),                       // 19: medical_record.MedicalRecordList
	(*MedicalArchive)(nil),                          // 20: medical_record.MedicalArchive
	(*MedicalRecordInfo)(nil),                       // 21: medical_record.MedicalRecordInfo
	(*PatientBasicInfo)(nil),                        // 22: medical_record.PatientBasicInfo
	(*LifeStyle)(nil),                               // 23: medical_record.LifeStyle
	(*Consultation)(nil),                            // 24: medical_record.Consultation
	(*DrugUsageItem)(nil),                           // 25: medical_record.DrugUsageItem
	(*HazardControlFactors)(nil),                    // 26: medical_record.HazardControlFactors
	(*GeneralInspection)(nil),                       // 27: medical_record.GeneralInspection
	(*PhysicalExamination)(nil),                     // 28: medical_record.PhysicalExamination
	(*LaboratoryExamination)(nil),                   // 29: medical_record.LaboratoryExamination
	(*Viscera)(nil),                                 // 30: medical_record.Viscera
	(*HealthAssessment)(nil),                        // 31: medical_record.HealthAssessment
	(*ExternalTreatmentPlanItem)(nil),               // 32: medical_record.ExternalTreatmentPlanItem
	(*ExposureToOccupationalHazard)(nil),            // 33: medical_record.ExposureToOccupationalHazard
	(*HospitalizationRecord)(nil),                   // 34: medical_record.HospitalizationRecord
	(*VaccinationHistory)(nil),                      // 35: medical_record.VaccinationHistory
	(*LivingEnvironment)(nil),                       // 36: medical_record.LivingEnvironment
	(*DiagnosisInfo)(nil),                           // 37: medical_record.DiagnosisInfo
	(*health.InspectionReport)(nil),                 // 38: health.InspectionReport
	(*emptypb.Empty)(nil),                           // 39: google.protobuf.Empty
}
var file_protos_medical_record_medical_record_proto_depIdxs = []int32{
	37, // 0: medical_record.UpdateDiagnosisInfoRequest.diagnosis_info:type_name -> medical_record.DiagnosisInfo
	33, // 1: medical_record.UpdateOccupationalExposureHazardRequest.exposure_to_occupational_hazards:type_name -> medical_record.ExposureToOccupationalHazard
	31, // 2: medical_record.UpdateHealthAssessmentRequest.health_assessment:type_name -> medical_record.HealthAssessment
	30, // 3: medical_record.UpdateVisceraRequest.viscera:type_name -> medical_record.Viscera
	26, // 4: medical_record.UpdateHazardControlFactorsRequest.hazard_control_factors:type_name -> medical_record.HazardControlFactors
	24, // 5: medical_record.UpdateConsultationRequest.consultation:type_name -> medical_record.Consultation
	28, // 6: medical_record.UpdatePhysicalExaminationRequest.physical_examination:type_name -> medical_record.PhysicalExamination
	22, // 7: medical_record.UpdateBasicInfoRequest.basic_info:type_name -> medical_record.PatientBasicInfo
	23, // 8: medical_record.UpdateLifeStyleRequest.life_style:type_name -> medical_record.LifeStyle
	20, // 9: medical_record.ArchiveListResponse.items:type_name -> medical_record.MedicalArchive
	0,  // 10: medical_record.MedicalRecord.archive_status:type_name -> medical_record.ArchiveStatus
	18, // 11: medical_record.MedicalRecordList.items:type_name -> medical_record.MedicalRecord
	22, // 12: medical_record.MedicalRecordInfo.basic_info:type_name -> medical_record.PatientBasicInfo
	23, // 13: medical_record.MedicalRecordInfo.life_style:type_name -> medical_record.LifeStyle
	24, // 14: medical_record.MedicalRecordInfo.consultation:type_name -> medical_record.Consultation
	25, // 15: medical_record.MedicalRecordInfo.drug_usage_items:type_name -> medical_record.DrugUsageItem
	27, // 16: medical_record.MedicalRecordInfo.general_inspection:type_name -> medical_record.GeneralInspection
	26, // 17: medical_record.MedicalRecordInfo.hazard_control_factors:type_name -> medical_record.HazardControlFactors
	28, // 18: medical_record.MedicalRecordInfo.physical_examination:type_name -> medical_record.PhysicalExamination
	29, // 19: medical_record.MedicalRecordInfo.laboratory_examination:type_name -> medical_record.LaboratoryExamination
	30, // 20: medical_record.MedicalRecordInfo.viscera:type_name -> medical_record.Viscera
	31, // 21: medical_record.MedicalRecordInfo.health_assessment:type_name -> medical_record.HealthAssessment
	32, // 22: medical_record.MedicalRecordInfo.external_treatment_plan_items:type_name -> medical_record.ExternalTreatmentPlanItem
	35, // 23: medical_record.MedicalRecordInfo.vaccination_history_list_items:type_name -> medical_record.VaccinationHistory
	34, // 24: medical_record.MedicalRecordInfo.hospitalization_record_items:type_name -> medical_record.HospitalizationRecord
	33, // 25: medical_record.MedicalRecordInfo.exposure_to_occupational_hazard_items:type_name -> medical_record.ExposureToOccupationalHazard
	36, // 26: medical_record.MedicalRecordInfo.living_environment_items:type_name -> medical_record.LivingEnvironment
	38, // 27: medical_record.MedicalRecordInfo.inspection_report_items:type_name -> health.InspectionReport
	37, // 28: medical_record.MedicalRecordInfo.diagnosis_info:type_name -> medical_record.DiagnosisInfo
	16, // 29: medical_record.MedicalRecordService.GenerateArchive:input_type -> medical_record.GenerateRequest
	14, // 30: medical_record.MedicalRecordService.ArchiveList:input_type -> medical_record.ArchiveListRequest
	12, // 31: medical_record.MedicalRecordService.GetMedicalRecords:input_type -> medical_record.GetMedicalRecordsRequest
	13, // 32: medical_record.MedicalRecordService.ArchiveRecord:input_type -> medical_record.ArchiveRequest
	17, // 33: medical_record.MedicalRecordService.GetMedicalRecordDetail:input_type -> medical_record.GetRequest
	9,  // 34: medical_record.MedicalRecordService.UpdateMedicalRecordBasicInfo:input_type -> medical_record.UpdateBasicInfoRequest
	10, // 35: medical_record.MedicalRecordService.UpdateMedicalRecordFamilyHistory:input_type -> medical_record.UpdateFamilyHistoryRequest
	11, // 36: medical_record.MedicalRecordService.UpdateLifeStyle:input_type -> medical_record.UpdateLifeStyleRequest
	7,  // 37: medical_record.MedicalRecordService.UpdateConsultation:input_type -> medical_record.UpdateConsultationRequest
	8,  // 38: medical_record.MedicalRecordService.UpdatePhysicalExamination:input_type -> medical_record.UpdatePhysicalExaminationRequest
	6,  // 39: medical_record.MedicalRecordService.UpdateHazardControlFactors:input_type -> medical_record.UpdateHazardControlFactorsRequest
	5,  // 40: medical_record.MedicalRecordService.UpdateViscera:input_type -> medical_record.UpdateVisceraRequest
	4,  // 41: medical_record.MedicalRecordService.UpdateHealthAssessment:input_type -> medical_record.UpdateHealthAssessmentRequest
	3,  // 42: medical_record.MedicalRecordService.UpdateChiefComplaint:input_type -> medical_record.UpdateChiefComplaintRequest
	2,  // 43: medical_record.MedicalRecordService.UpdateOccupationalExposureHazard:input_type -> medical_record.UpdateOccupationalExposureHazardRequest
	1,  // 44: medical_record.MedicalRecordService.UpdateDiagnosisInfo:input_type -> medical_record.UpdateDiagnosisInfoRequest
	20, // 45: medical_record.MedicalRecordService.GenerateArchive:output_type -> medical_record.MedicalArchive
	15, // 46: medical_record.MedicalRecordService.ArchiveList:output_type -> medical_record.ArchiveListResponse
	19, // 47: medical_record.MedicalRecordService.GetMedicalRecords:output_type -> medical_record.MedicalRecordList
	39, // 48: medical_record.MedicalRecordService.ArchiveRecord:output_type -> google.protobuf.Empty
	21, // 49: medical_record.MedicalRecordService.GetMedicalRecordDetail:output_type -> medical_record.MedicalRecordInfo
	39, // 50: medical_record.MedicalRecordService.UpdateMedicalRecordBasicInfo:output_type -> google.protobuf.Empty
	39, // 51: medical_record.MedicalRecordService.UpdateMedicalRecordFamilyHistory:output_type -> google.protobuf.Empty
	39, // 52: medical_record.MedicalRecordService.UpdateLifeStyle:output_type -> google.protobuf.Empty
	39, // 53: medical_record.MedicalRecordService.UpdateConsultation:output_type -> google.protobuf.Empty
	39, // 54: medical_record.MedicalRecordService.UpdatePhysicalExamination:output_type -> google.protobuf.Empty
	39, // 55: medical_record.MedicalRecordService.UpdateHazardControlFactors:output_type -> google.protobuf.Empty
	39, // 56: medical_record.MedicalRecordService.UpdateViscera:output_type -> google.protobuf.Empty
	39, // 57: medical_record.MedicalRecordService.UpdateHealthAssessment:output_type -> google.protobuf.Empty
	39, // 58: medical_record.MedicalRecordService.UpdateChiefComplaint:output_type -> google.protobuf.Empty
	39, // 59: medical_record.MedicalRecordService.UpdateOccupationalExposureHazard:output_type -> google.protobuf.Empty
	39, // 60: medical_record.MedicalRecordService.UpdateDiagnosisInfo:output_type -> google.protobuf.Empty
	45, // [45:61] is the sub-list for method output_type
	29, // [29:45] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_protos_medical_record_medical_record_proto_init() }
func file_protos_medical_record_medical_record_proto_init() {
	if File_protos_medical_record_medical_record_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_medical_record_medical_record_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDiagnosisInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_medical_record_medical_record_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOccupationalExposureHazardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_medical_record_medical_record_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChiefComplaintRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_medical_record_medical_record_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHealthAssessmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_medical_record_medical_record_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVisceraRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_medical_record_medical_record_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHazardControlFactorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_medical_record_medical_record_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConsultationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_medical_record_medical_record_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePhysicalExaminationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_medical_record_medical_record_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBasicInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_medical_record_medical_record_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFamilyHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_medical_record_medical_record_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLifeStyleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_medical_record_medical_record_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMedicalRecordsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_medical_record_medical_record_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArchiveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_medical_record_medical_record_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArchiveListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_medical_record_medical_record_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArchiveListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_medical_record_medical_record_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_medical_record_medical_record_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_medical_record_medical_record_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicalRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_medical_record_medical_record_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicalRecordList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_medical_record_medical_record_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicalArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_medical_record_medical_record_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicalRecordInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_medical_record_medical_record_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatientBasicInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_medical_record_medical_record_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LifeStyle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_medical_record_medical_record_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Consultation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_medical_record_medical_record_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrugUsageItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_medical_record_medical_record_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HazardControlFactors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_medical_record_medical_record_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralInspection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_medical_record_medical_record_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhysicalExamination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_medical_record_medical_record_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LaboratoryExamination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_medical_record_medical_record_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Viscera); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_medical_record_medical_record_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthAssessment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_medical_record_medical_record_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalTreatmentPlanItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_medical_record_medical_record_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExposureToOccupationalHazard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_medical_record_medical_record_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HospitalizationRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_medical_record_medical_record_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VaccinationHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_medical_record_medical_record_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LivingEnvironment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_medical_record_medical_record_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiagnosisInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_medical_record_medical_record_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protos_medical_record_medical_record_proto_goTypes,
		DependencyIndexes: file_protos_medical_record_medical_record_proto_depIdxs,
		EnumInfos:         file_protos_medical_record_medical_record_proto_enumTypes,
		MessageInfos:      file_protos_medical_record_medical_record_proto_msgTypes,
	}.Build()
	File_protos_medical_record_medical_record_proto = out.File
	file_protos_medical_record_medical_record_proto_rawDesc = nil
	file_protos_medical_record_medical_record_proto_goTypes = nil
	file_protos_medical_record_medical_record_proto_depIdxs = nil
}
